{"ast":null,"code":"const LOCAL_STORAGE_KEYS = {\n  FACE_DESCRIPTORS: 'face_descriptors',\n  USER_DATA: 'user_data'\n};\nexport const saveFaceDescriptor = (userId, descriptor) => {\n  try {\n    // Ensure descriptor is properly converted to Array\n    const descriptorArray = Array.from(descriptor);\n    const faceData = {\n      userId,\n      descriptor: descriptorArray,\n      timestamp: new Date().toISOString()\n    };\n    console.log('Saving face descriptor:', faceData);\n\n    // Get existing descriptors, ensuring we have a valid array\n    let existingData;\n    try {\n      existingData = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEYS.FACE_DESCRIPTORS) || '[]');\n      if (!Array.isArray(existingData)) {\n        console.warn('Stored face descriptors is not an array, resetting');\n        existingData = [];\n      }\n    } catch (e) {\n      console.warn('Error parsing stored face descriptors, resetting', e);\n      existingData = [];\n    }\n\n    // Add new descriptor and save\n    existingData.push(faceData);\n    localStorage.setItem(LOCAL_STORAGE_KEYS.FACE_DESCRIPTORS, JSON.stringify(existingData));\n\n    // Verify data was saved correctly\n    console.log(`Face data saved. Total descriptors: ${existingData.length}`);\n    return true;\n  } catch (error) {\n    console.error('Error saving face descriptor:', error);\n    return false;\n  }\n};\nexport const getFaceDescriptor = userId => {\n  try {\n    const allDescriptors = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEYS.FACE_DESCRIPTORS) || '[]');\n    const userDescriptor = allDescriptors.find(data => data.userId === userId);\n    return userDescriptor ? new Float32Array(userDescriptor.descriptor) : null;\n  } catch (error) {\n    console.error('Error getting face descriptor:', error);\n    return null;\n  }\n};\nexport const saveUserData = userData => {\n  try {\n    const existingUsers = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEYS.USER_DATA) || '[]');\n    existingUsers.push(userData);\n    localStorage.setItem(LOCAL_STORAGE_KEYS.USER_DATA, JSON.stringify(existingUsers));\n    return true;\n  } catch (error) {\n    console.error('Error saving user data:', error);\n    return false;\n  }\n};","map":{"version":3,"names":["LOCAL_STORAGE_KEYS","FACE_DESCRIPTORS","USER_DATA","saveFaceDescriptor","userId","descriptor","descriptorArray","Array","from","faceData","timestamp","Date","toISOString","console","log","existingData","JSON","parse","localStorage","getItem","isArray","warn","e","push","setItem","stringify","length","error","getFaceDescriptor","allDescriptors","userDescriptor","find","data","Float32Array","saveUserData","userData","existingUsers"],"sources":["D:/Movies/Aniket/test2/test/src/services/localStorageService.js"],"sourcesContent":["const LOCAL_STORAGE_KEYS = {\r\n  FACE_DESCRIPTORS: 'face_descriptors',\r\n  USER_DATA: 'user_data'\r\n};\r\n\r\nexport const saveFaceDescriptor = (userId, descriptor) => {\r\n  try {\r\n    // Ensure descriptor is properly converted to Array\r\n    const descriptorArray = Array.from(descriptor);\r\n    \r\n    const faceData = {\r\n      userId,\r\n      descriptor: descriptorArray,\r\n      timestamp: new Date().toISOString()\r\n    };\r\n    \r\n    console.log('Saving face descriptor:', faceData); \r\n    \r\n    // Get existing descriptors, ensuring we have a valid array\r\n    let existingData;\r\n    try {\r\n      existingData = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEYS.FACE_DESCRIPTORS) || '[]');\r\n      if (!Array.isArray(existingData)) {\r\n        console.warn('Stored face descriptors is not an array, resetting');\r\n        existingData = [];\r\n      }\r\n    } catch (e) {\r\n      console.warn('Error parsing stored face descriptors, resetting', e);\r\n      existingData = [];\r\n    }\r\n    \r\n    // Add new descriptor and save\r\n    existingData.push(faceData);\r\n    localStorage.setItem(LOCAL_STORAGE_KEYS.FACE_DESCRIPTORS, JSON.stringify(existingData));\r\n    \r\n    // Verify data was saved correctly\r\n    console.log(`Face data saved. Total descriptors: ${existingData.length}`);\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error saving face descriptor:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\nexport const getFaceDescriptor = (userId) => {\r\n  try {\r\n    const allDescriptors = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEYS.FACE_DESCRIPTORS) || '[]');\r\n    const userDescriptor = allDescriptors.find(data => data.userId === userId);\r\n    return userDescriptor ? new Float32Array(userDescriptor.descriptor) : null;\r\n  } catch (error) {\r\n    console.error('Error getting face descriptor:', error);\r\n    return null;\r\n  }\r\n};\r\n\r\nexport const saveUserData = (userData) => {\r\n  try {\r\n    const existingUsers = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEYS.USER_DATA) || '[]');\r\n    existingUsers.push(userData);\r\n    localStorage.setItem(LOCAL_STORAGE_KEYS.USER_DATA, JSON.stringify(existingUsers));\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error saving user data:', error);\r\n    return false;\r\n  }\r\n};\r\n"],"mappings":"AAAA,MAAMA,kBAAkB,GAAG;EACzBC,gBAAgB,EAAE,kBAAkB;EACpCC,SAAS,EAAE;AACb,CAAC;AAED,OAAO,MAAMC,kBAAkB,GAAGA,CAACC,MAAM,EAAEC,UAAU,KAAK;EACxD,IAAI;IACF;IACA,MAAMC,eAAe,GAAGC,KAAK,CAACC,IAAI,CAACH,UAAU,CAAC;IAE9C,MAAMI,QAAQ,GAAG;MACfL,MAAM;MACNC,UAAU,EAAEC,eAAe;MAC3BI,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;IACpC,CAAC;IAEDC,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEL,QAAQ,CAAC;;IAEhD;IACA,IAAIM,YAAY;IAChB,IAAI;MACFA,YAAY,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAACnB,kBAAkB,CAACC,gBAAgB,CAAC,IAAI,IAAI,CAAC;MAC5F,IAAI,CAACM,KAAK,CAACa,OAAO,CAACL,YAAY,CAAC,EAAE;QAChCF,OAAO,CAACQ,IAAI,CAAC,oDAAoD,CAAC;QAClEN,YAAY,GAAG,EAAE;MACnB;IACF,CAAC,CAAC,OAAOO,CAAC,EAAE;MACVT,OAAO,CAACQ,IAAI,CAAC,kDAAkD,EAAEC,CAAC,CAAC;MACnEP,YAAY,GAAG,EAAE;IACnB;;IAEA;IACAA,YAAY,CAACQ,IAAI,CAACd,QAAQ,CAAC;IAC3BS,YAAY,CAACM,OAAO,CAACxB,kBAAkB,CAACC,gBAAgB,EAAEe,IAAI,CAACS,SAAS,CAACV,YAAY,CAAC,CAAC;;IAEvF;IACAF,OAAO,CAACC,GAAG,CAAC,uCAAuCC,YAAY,CAACW,MAAM,EAAE,CAAC;IACzE,OAAO,IAAI;EACb,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdd,OAAO,CAACc,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;IACrD,OAAO,KAAK;EACd;AACF,CAAC;AAED,OAAO,MAAMC,iBAAiB,GAAIxB,MAAM,IAAK;EAC3C,IAAI;IACF,MAAMyB,cAAc,GAAGb,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAACnB,kBAAkB,CAACC,gBAAgB,CAAC,IAAI,IAAI,CAAC;IACpG,MAAM6B,cAAc,GAAGD,cAAc,CAACE,IAAI,CAACC,IAAI,IAAIA,IAAI,CAAC5B,MAAM,KAAKA,MAAM,CAAC;IAC1E,OAAO0B,cAAc,GAAG,IAAIG,YAAY,CAACH,cAAc,CAACzB,UAAU,CAAC,GAAG,IAAI;EAC5E,CAAC,CAAC,OAAOsB,KAAK,EAAE;IACdd,OAAO,CAACc,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;IACtD,OAAO,IAAI;EACb;AACF,CAAC;AAED,OAAO,MAAMO,YAAY,GAAIC,QAAQ,IAAK;EACxC,IAAI;IACF,MAAMC,aAAa,GAAGpB,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAACnB,kBAAkB,CAACE,SAAS,CAAC,IAAI,IAAI,CAAC;IAC5FkC,aAAa,CAACb,IAAI,CAACY,QAAQ,CAAC;IAC5BjB,YAAY,CAACM,OAAO,CAACxB,kBAAkB,CAACE,SAAS,EAAEc,IAAI,CAACS,SAAS,CAACW,aAAa,CAAC,CAAC;IACjF,OAAO,IAAI;EACb,CAAC,CAAC,OAAOT,KAAK,EAAE;IACdd,OAAO,CAACc,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAC/C,OAAO,KAAK;EACd;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}