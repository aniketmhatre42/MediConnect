{"ast":null,"code":"import { ref, set, get, remove, serverTimestamp } from \"firebase/database\";\nimport { rtdb } from \"../firebase/config\";\n\n// Reference to faces in Firebase Realtime Database\nconst FACES_REF = \"faces\";\nconst DEBUG_REF = \"debug\";\n\n/**\r\n * Save face descriptor to Firebase Realtime Database using username as key\r\n * @param {string} userId - User ID (will be stored as additional data)\r\n * @param {string} username - Username to use as primary identifier \r\n * @param {Float32Array} descriptor - Face descriptor data\r\n * @returns {Promise<boolean>} Success status\r\n */\nexport const saveFaceToFirebase = async (userId, username, descriptor) => {\n  console.log(`Starting Firebase save process for user ${username} (ID: ${userId})...`);\n\n  // Validate inputs\n  if (!username || !descriptor) {\n    console.error(\"Missing required parameters for saving face data\");\n    return false;\n  }\n\n  // Sanitize username to create a valid Firebase key\n  const safeUsername = username.replace(/[.#$/[\\]]/g, '_');\n\n  // Validate Firebase connection\n  if (!rtdb) {\n    console.error(\"Firebase Realtime Database not initialized\");\n    return false;\n  }\n  try {\n    console.log(`RTDB URL: ${rtdb.app.options.databaseURL}`);\n\n    // First run a basic write test\n    console.log(\"Running connectivity test...\");\n    const testRef = ref(rtdb, `${DEBUG_REF}/connectivity_test`);\n    await set(testRef, {\n      timestamp: new Date().toISOString(),\n      client: navigator.userAgent,\n      success: true\n    });\n    console.log(\"✅ Test write successful\");\n\n    // Convert descriptor to array\n    console.log(\"Preparing descriptor data...\");\n    const descriptorArray = Array.from(descriptor);\n\n    // Define path and create ref - using username as the key\n    const path = `${FACES_REF}/${safeUsername}`;\n    console.log(`Writing to path: ${path}`);\n\n    // Write metadata first\n    await set(ref(rtdb, `${path}/metadata`), {\n      userId: userId,\n      // Store userId as a reference\n      username: username,\n      descriptorLength: descriptorArray.length,\n      browser: navigator.userAgent.split(' ')[0],\n      userAgent: navigator.userAgent,\n      descriptorSample: descriptorArray.slice(0, 3) // Store sample of first 3 values\n    });\n    console.log(\"✅ Metadata written\");\n\n    // Then write descriptor in batches of 20\n    const BATCH_SIZE = 20;\n    for (let i = 0; i < descriptorArray.length; i += BATCH_SIZE) {\n      const batch = descriptorArray.slice(i, i + BATCH_SIZE);\n      await set(ref(rtdb, `${path}/descriptor_part_${i / BATCH_SIZE}`), batch);\n    }\n\n    // Finally write the basic info\n    await set(ref(rtdb, `${path}/info`), {\n      userId,\n      username,\n      timestamp: new Date().toISOString(),\n      parts: Math.ceil(descriptorArray.length / BATCH_SIZE)\n    });\n    console.log(\"✅ All data written successfully\");\n\n    // Verify data was written\n    const snapshot = await get(ref(rtdb, `${path}/info`));\n    if (snapshot.exists()) {\n      console.log(\"✅ Verification successful\");\n      return true;\n    } else {\n      console.error(\"❌ Verification failed - data not found after write\");\n      return false;\n    }\n  } catch (error) {\n    console.error(\"❌ Error saving face data to Firebase:\", error);\n    return false;\n  }\n};\n\n/**\r\n * Get face descriptor from Firebase by username\r\n * @param {string} username - Username\r\n * @returns {Promise<Float32Array|null>} Face descriptor or null if not found\r\n */\nexport const getFaceFromFirebase = async username => {\n  try {\n    if (!username) {\n      console.error(\"Username is required to get face data\");\n      return null;\n    }\n\n    // Sanitize username for Firebase\n    const safeUsername = username.replace(/[.#$/[\\]]/g, '_');\n\n    // Check if we have the full descriptor in one piece\n    const fullPath = `${FACES_REF}/${safeUsername}`;\n    const fullSnapshot = await get(ref(rtdb, fullPath));\n    if (!fullSnapshot.exists()) {\n      console.log(`No data found for username ${username}`);\n      return null;\n    }\n    const data = fullSnapshot.val();\n\n    // Check if we have a simple descriptor array\n    if (data && data.descriptor) {\n      console.log(`Single-part descriptor found for ${username}`);\n      return new Float32Array(data.descriptor);\n    }\n\n    // Check if we have multi-part descriptor\n    if (data && data.info && data.info.parts) {\n      console.log(`Multi-part descriptor found for ${username} (${data.info.parts} parts)`);\n\n      // Assemble descriptor from parts\n      const descriptorParts = [];\n      for (let i = 0; i < data.info.parts; i++) {\n        const partKey = `descriptor_part_${i}`;\n        if (data[partKey]) {\n          descriptorParts.push(...data[partKey]);\n        }\n      }\n      if (descriptorParts.length > 0) {\n        return new Float32Array(descriptorParts);\n      }\n    }\n    console.log(`Data found for ${username} but no valid descriptor`);\n    return null;\n  } catch (error) {\n    console.error(\"Error getting face from Firebase:\", error);\n    return null;\n  }\n};\n\n/**\r\n * Remove face descriptor from Firebase by username\r\n * @param {string} username - Username\r\n * @returns {Promise<boolean>} Success status\r\n */\nexport const removeFaceFromFirebase = async username => {\n  try {\n    if (!username) {\n      console.error(\"Username is required to remove face data\");\n      return false;\n    }\n\n    // Sanitize username for Firebase\n    const safeUsername = username.replace(/[.#$/[\\]]/g, '_');\n    const faceRef = ref(rtdb, `${FACES_REF}/${safeUsername}`);\n    await remove(faceRef);\n    console.log(`Face descriptor for ${username} removed from Firebase`);\n    return true;\n  } catch (error) {\n    console.error(\"Error removing face from Firebase:\", error);\n    return false;\n  }\n};\n\n/**\r\n * Check if username has face data in Firebase\r\n * @param {string} username - Username\r\n * @returns {Promise<boolean>} Whether face data exists\r\n */\nexport const hasFaceInFirebase = async username => {\n  try {\n    if (!username) return false;\n\n    // Sanitize username for Firebase\n    const safeUsername = username.replace(/[.#$/[\\]]/g, '_');\n    const faceRef = ref(rtdb, `${FACES_REF}/${safeUsername}`);\n    const snapshot = await get(faceRef);\n    return snapshot.exists();\n  } catch (error) {\n    console.error(\"Error checking face in Firebase:\", error);\n    return false;\n  }\n};\n\n// Keep the old user ID based methods for backward compatibility\n// But mark them as deprecated\n\n/**\r\n * @deprecated Use username-based methods instead\r\n */\nexport const saveFaceToFirebaseById = async (userId, descriptor) => {\n  console.warn(\"This method is deprecated. Use username-based methods instead.\");\n  // ...existing code...\n};\n\n/**\r\n * @deprecated Use username-based methods instead\r\n */\nexport const getFaceFromFirebaseById = async userId => {\n  console.warn(\"This method is deprecated. Use username-based methods instead.\");\n  // ...existing code...\n};","map":{"version":3,"names":["ref","set","get","remove","serverTimestamp","rtdb","FACES_REF","DEBUG_REF","saveFaceToFirebase","userId","username","descriptor","console","log","error","safeUsername","replace","app","options","databaseURL","testRef","timestamp","Date","toISOString","client","navigator","userAgent","success","descriptorArray","Array","from","path","descriptorLength","length","browser","split","descriptorSample","slice","BATCH_SIZE","i","batch","parts","Math","ceil","snapshot","exists","getFaceFromFirebase","fullPath","fullSnapshot","data","val","Float32Array","info","descriptorParts","partKey","push","removeFaceFromFirebase","faceRef","hasFaceInFirebase","saveFaceToFirebaseById","warn","getFaceFromFirebaseById"],"sources":["D:/Movies/Aniket/test2/test/src/services/firebaseFaceService.js"],"sourcesContent":["import { ref, set, get, remove, serverTimestamp } from \"firebase/database\";\r\nimport { rtdb } from \"../firebase/config\";\r\n\r\n// Reference to faces in Firebase Realtime Database\r\nconst FACES_REF = \"faces\";\r\nconst DEBUG_REF = \"debug\";\r\n\r\n/**\r\n * Save face descriptor to Firebase Realtime Database using username as key\r\n * @param {string} userId - User ID (will be stored as additional data)\r\n * @param {string} username - Username to use as primary identifier \r\n * @param {Float32Array} descriptor - Face descriptor data\r\n * @returns {Promise<boolean>} Success status\r\n */\r\nexport const saveFaceToFirebase = async (userId, username, descriptor) => {\r\n  console.log(`Starting Firebase save process for user ${username} (ID: ${userId})...`);\r\n  \r\n  // Validate inputs\r\n  if (!username || !descriptor) {\r\n    console.error(\"Missing required parameters for saving face data\");\r\n    return false;\r\n  }\r\n  \r\n  // Sanitize username to create a valid Firebase key\r\n  const safeUsername = username.replace(/[.#$/[\\]]/g, '_');\r\n  \r\n  // Validate Firebase connection\r\n  if (!rtdb) {\r\n    console.error(\"Firebase Realtime Database not initialized\");\r\n    return false;\r\n  }\r\n  \r\n  try {\r\n    console.log(`RTDB URL: ${rtdb.app.options.databaseURL}`);\r\n    \r\n    // First run a basic write test\r\n    console.log(\"Running connectivity test...\");\r\n    const testRef = ref(rtdb, `${DEBUG_REF}/connectivity_test`);\r\n    await set(testRef, {\r\n      timestamp: new Date().toISOString(),\r\n      client: navigator.userAgent,\r\n      success: true\r\n    });\r\n    console.log(\"✅ Test write successful\");\r\n    \r\n    // Convert descriptor to array\r\n    console.log(\"Preparing descriptor data...\");\r\n    const descriptorArray = Array.from(descriptor);\r\n    \r\n    // Define path and create ref - using username as the key\r\n    const path = `${FACES_REF}/${safeUsername}`;\r\n    console.log(`Writing to path: ${path}`);\r\n    \r\n    // Write metadata first\r\n    await set(ref(rtdb, `${path}/metadata`), {\r\n      userId: userId, // Store userId as a reference\r\n      username: username,\r\n      descriptorLength: descriptorArray.length,\r\n      browser: navigator.userAgent.split(' ')[0],\r\n      userAgent: navigator.userAgent,\r\n      descriptorSample: descriptorArray.slice(0, 3) // Store sample of first 3 values\r\n    });\r\n    console.log(\"✅ Metadata written\");\r\n    \r\n    // Then write descriptor in batches of 20\r\n    const BATCH_SIZE = 20;\r\n    for (let i = 0; i < descriptorArray.length; i += BATCH_SIZE) {\r\n      const batch = descriptorArray.slice(i, i + BATCH_SIZE);\r\n      await set(ref(rtdb, `${path}/descriptor_part_${i/BATCH_SIZE}`), batch);\r\n    }\r\n    \r\n    // Finally write the basic info\r\n    await set(ref(rtdb, `${path}/info`), {\r\n      userId,\r\n      username,\r\n      timestamp: new Date().toISOString(),\r\n      parts: Math.ceil(descriptorArray.length / BATCH_SIZE)\r\n    });\r\n    \r\n    console.log(\"✅ All data written successfully\");\r\n    \r\n    // Verify data was written\r\n    const snapshot = await get(ref(rtdb, `${path}/info`));\r\n    if (snapshot.exists()) {\r\n      console.log(\"✅ Verification successful\");\r\n      return true;\r\n    } else {\r\n      console.error(\"❌ Verification failed - data not found after write\");\r\n      return false;\r\n    }\r\n  } catch (error) {\r\n    console.error(\"❌ Error saving face data to Firebase:\", error);\r\n    return false;\r\n  }\r\n};\r\n\r\n/**\r\n * Get face descriptor from Firebase by username\r\n * @param {string} username - Username\r\n * @returns {Promise<Float32Array|null>} Face descriptor or null if not found\r\n */\r\nexport const getFaceFromFirebase = async (username) => {\r\n  try {\r\n    if (!username) {\r\n      console.error(\"Username is required to get face data\");\r\n      return null;\r\n    }\r\n    \r\n    // Sanitize username for Firebase\r\n    const safeUsername = username.replace(/[.#$/[\\]]/g, '_');\r\n    \r\n    // Check if we have the full descriptor in one piece\r\n    const fullPath = `${FACES_REF}/${safeUsername}`;\r\n    const fullSnapshot = await get(ref(rtdb, fullPath));\r\n    \r\n    if (!fullSnapshot.exists()) {\r\n      console.log(`No data found for username ${username}`);\r\n      return null;\r\n    }\r\n    \r\n    const data = fullSnapshot.val();\r\n    \r\n    // Check if we have a simple descriptor array\r\n    if (data && data.descriptor) {\r\n      console.log(`Single-part descriptor found for ${username}`);\r\n      return new Float32Array(data.descriptor);\r\n    }\r\n    \r\n    // Check if we have multi-part descriptor\r\n    if (data && data.info && data.info.parts) {\r\n      console.log(`Multi-part descriptor found for ${username} (${data.info.parts} parts)`);\r\n      \r\n      // Assemble descriptor from parts\r\n      const descriptorParts = [];\r\n      for (let i = 0; i < data.info.parts; i++) {\r\n        const partKey = `descriptor_part_${i}`;\r\n        if (data[partKey]) {\r\n          descriptorParts.push(...data[partKey]);\r\n        }\r\n      }\r\n      \r\n      if (descriptorParts.length > 0) {\r\n        return new Float32Array(descriptorParts);\r\n      }\r\n    }\r\n    \r\n    console.log(`Data found for ${username} but no valid descriptor`);\r\n    return null;\r\n  } catch (error) {\r\n    console.error(\"Error getting face from Firebase:\", error);\r\n    return null;\r\n  }\r\n};\r\n\r\n/**\r\n * Remove face descriptor from Firebase by username\r\n * @param {string} username - Username\r\n * @returns {Promise<boolean>} Success status\r\n */\r\nexport const removeFaceFromFirebase = async (username) => {\r\n  try {\r\n    if (!username) {\r\n      console.error(\"Username is required to remove face data\");\r\n      return false;\r\n    }\r\n    \r\n    // Sanitize username for Firebase\r\n    const safeUsername = username.replace(/[.#$/[\\]]/g, '_');\r\n    const faceRef = ref(rtdb, `${FACES_REF}/${safeUsername}`);\r\n    await remove(faceRef);\r\n    \r\n    console.log(`Face descriptor for ${username} removed from Firebase`);\r\n    return true;\r\n  } catch (error) {\r\n    console.error(\"Error removing face from Firebase:\", error);\r\n    return false;\r\n  }\r\n};\r\n\r\n/**\r\n * Check if username has face data in Firebase\r\n * @param {string} username - Username\r\n * @returns {Promise<boolean>} Whether face data exists\r\n */\r\nexport const hasFaceInFirebase = async (username) => {\r\n  try {\r\n    if (!username) return false;\r\n    \r\n    // Sanitize username for Firebase\r\n    const safeUsername = username.replace(/[.#$/[\\]]/g, '_');\r\n    const faceRef = ref(rtdb, `${FACES_REF}/${safeUsername}`);\r\n    const snapshot = await get(faceRef);\r\n    \r\n    return snapshot.exists();\r\n  } catch (error) {\r\n    console.error(\"Error checking face in Firebase:\", error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// Keep the old user ID based methods for backward compatibility\r\n// But mark them as deprecated\r\n\r\n/**\r\n * @deprecated Use username-based methods instead\r\n */\r\nexport const saveFaceToFirebaseById = async (userId, descriptor) => {\r\n  console.warn(\"This method is deprecated. Use username-based methods instead.\");\r\n  // ...existing code...\r\n};\r\n\r\n/**\r\n * @deprecated Use username-based methods instead\r\n */\r\nexport const getFaceFromFirebaseById = async (userId) => {\r\n  console.warn(\"This method is deprecated. Use username-based methods instead.\");\r\n  // ...existing code...\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}