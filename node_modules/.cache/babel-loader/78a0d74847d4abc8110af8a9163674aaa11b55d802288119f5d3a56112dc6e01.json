{"ast":null,"code":"const LOCAL_STORAGE_KEYS = {\n  FACE_DESCRIPTORS: 'face_descriptors',\n  USER_DATA: 'user_data'\n};\nexport const saveFaceDescriptor = (userId, descriptor) => {\n  try {\n    const faceData = {\n      userId,\n      descriptor: Array.from(descriptor),\n      timestamp: new Date().toISOString()\n    };\n    console.log('Saving face descriptor:', faceData); // Debug log\n\n    const existingData = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEYS.FACE_DESCRIPTORS) || '[]');\n    existingData.push(faceData);\n    localStorage.setItem(LOCAL_STORAGE_KEYS.FACE_DESCRIPTORS, JSON.stringify(existingData));\n\n    // Verify data was saved\n    const savedData = localStorage.getItem(LOCAL_STORAGE_KEYS.FACE_DESCRIPTORS);\n    console.log('Saved face descriptors:', savedData); // Debug log\n\n    return true;\n  } catch (error) {\n    console.error('Error saving face descriptor:', error);\n    return false;\n  }\n};\nexport const getFaceDescriptor = userId => {\n  try {\n    const allDescriptors = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEYS.FACE_DESCRIPTORS) || '[]');\n    const userDescriptor = allDescriptors.find(data => data.userId === userId);\n    return userDescriptor ? new Float32Array(userDescriptor.descriptor) : null;\n  } catch (error) {\n    console.error('Error getting face descriptor:', error);\n    return null;\n  }\n};\nexport const saveUserData = userData => {\n  try {\n    const existingUsers = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEYS.USER_DATA) || '[]');\n    existingUsers.push(userData);\n    localStorage.setItem(LOCAL_STORAGE_KEYS.USER_DATA, JSON.stringify(existingUsers));\n    return true;\n  } catch (error) {\n    console.error('Error saving user data:', error);\n    return false;\n  }\n};","map":{"version":3,"names":["LOCAL_STORAGE_KEYS","FACE_DESCRIPTORS","USER_DATA","saveFaceDescriptor","userId","descriptor","faceData","Array","from","timestamp","Date","toISOString","console","log","existingData","JSON","parse","localStorage","getItem","push","setItem","stringify","savedData","error","getFaceDescriptor","allDescriptors","userDescriptor","find","data","Float32Array","saveUserData","userData","existingUsers"],"sources":["D:/Movies/Aniket/test2/test/src/services/localStorageService.js"],"sourcesContent":["const LOCAL_STORAGE_KEYS = {\r\n  FACE_DESCRIPTORS: 'face_descriptors',\r\n  USER_DATA: 'user_data'\r\n};\r\n\r\nexport const saveFaceDescriptor = (userId, descriptor) => {\r\n  try {\r\n    const faceData = {\r\n      userId,\r\n      descriptor: Array.from(descriptor),\r\n      timestamp: new Date().toISOString()\r\n    };\r\n    \r\n    console.log('Saving face descriptor:', faceData); // Debug log\r\n    \r\n    const existingData = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEYS.FACE_DESCRIPTORS) || '[]');\r\n    existingData.push(faceData);\r\n    \r\n    localStorage.setItem(LOCAL_STORAGE_KEYS.FACE_DESCRIPTORS, JSON.stringify(existingData));\r\n    \r\n    // Verify data was saved\r\n    const savedData = localStorage.getItem(LOCAL_STORAGE_KEYS.FACE_DESCRIPTORS);\r\n    console.log('Saved face descriptors:', savedData); // Debug log\r\n    \r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error saving face descriptor:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\nexport const getFaceDescriptor = (userId) => {\r\n  try {\r\n    const allDescriptors = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEYS.FACE_DESCRIPTORS) || '[]');\r\n    const userDescriptor = allDescriptors.find(data => data.userId === userId);\r\n    return userDescriptor ? new Float32Array(userDescriptor.descriptor) : null;\r\n  } catch (error) {\r\n    console.error('Error getting face descriptor:', error);\r\n    return null;\r\n  }\r\n};\r\n\r\nexport const saveUserData = (userData) => {\r\n  try {\r\n    const existingUsers = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEYS.USER_DATA) || '[]');\r\n    existingUsers.push(userData);\r\n    localStorage.setItem(LOCAL_STORAGE_KEYS.USER_DATA, JSON.stringify(existingUsers));\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error saving user data:', error);\r\n    return false;\r\n  }\r\n};\r\n"],"mappings":"AAAA,MAAMA,kBAAkB,GAAG;EACzBC,gBAAgB,EAAE,kBAAkB;EACpCC,SAAS,EAAE;AACb,CAAC;AAED,OAAO,MAAMC,kBAAkB,GAAGA,CAACC,MAAM,EAAEC,UAAU,KAAK;EACxD,IAAI;IACF,MAAMC,QAAQ,GAAG;MACfF,MAAM;MACNC,UAAU,EAAEE,KAAK,CAACC,IAAI,CAACH,UAAU,CAAC;MAClCI,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;IACpC,CAAC;IAEDC,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEP,QAAQ,CAAC,CAAC,CAAC;;IAElD,MAAMQ,YAAY,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAClB,kBAAkB,CAACC,gBAAgB,CAAC,IAAI,IAAI,CAAC;IAClGa,YAAY,CAACK,IAAI,CAACb,QAAQ,CAAC;IAE3BW,YAAY,CAACG,OAAO,CAACpB,kBAAkB,CAACC,gBAAgB,EAAEc,IAAI,CAACM,SAAS,CAACP,YAAY,CAAC,CAAC;;IAEvF;IACA,MAAMQ,SAAS,GAAGL,YAAY,CAACC,OAAO,CAAClB,kBAAkB,CAACC,gBAAgB,CAAC;IAC3EW,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAES,SAAS,CAAC,CAAC,CAAC;;IAEnD,OAAO,IAAI;EACb,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdX,OAAO,CAACW,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;IACrD,OAAO,KAAK;EACd;AACF,CAAC;AAED,OAAO,MAAMC,iBAAiB,GAAIpB,MAAM,IAAK;EAC3C,IAAI;IACF,MAAMqB,cAAc,GAAGV,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAClB,kBAAkB,CAACC,gBAAgB,CAAC,IAAI,IAAI,CAAC;IACpG,MAAMyB,cAAc,GAAGD,cAAc,CAACE,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACxB,MAAM,KAAKA,MAAM,CAAC;IAC1E,OAAOsB,cAAc,GAAG,IAAIG,YAAY,CAACH,cAAc,CAACrB,UAAU,CAAC,GAAG,IAAI;EAC5E,CAAC,CAAC,OAAOkB,KAAK,EAAE;IACdX,OAAO,CAACW,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;IACtD,OAAO,IAAI;EACb;AACF,CAAC;AAED,OAAO,MAAMO,YAAY,GAAIC,QAAQ,IAAK;EACxC,IAAI;IACF,MAAMC,aAAa,GAAGjB,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAClB,kBAAkB,CAACE,SAAS,CAAC,IAAI,IAAI,CAAC;IAC5F8B,aAAa,CAACb,IAAI,CAACY,QAAQ,CAAC;IAC5Bd,YAAY,CAACG,OAAO,CAACpB,kBAAkB,CAACE,SAAS,EAAEa,IAAI,CAACM,SAAS,CAACW,aAAa,CAAC,CAAC;IACjF,OAAO,IAAI;EACb,CAAC,CAAC,OAAOT,KAAK,EAAE;IACdX,OAAO,CAACW,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAC/C,OAAO,KAAK;EACd;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}