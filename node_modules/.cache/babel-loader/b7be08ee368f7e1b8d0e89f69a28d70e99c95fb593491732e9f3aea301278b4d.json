{"ast":null,"code":"/**\r\n * Utility functions for authentication\r\n */\n\n/**\r\n * Check if user is logged in by examining session and local storage\r\n * @returns {Object|null} User object if logged in, null if not\r\n */\nexport const getLoggedInUser = () => {\n  // Check if this is a regular user with face authentication\n  const authenticated = sessionStorage.getItem('authenticated') === 'true';\n  const userId = sessionStorage.getItem('userId');\n  const username = sessionStorage.getItem('username');\n\n  // For face auth login (primary method)\n  if (authenticated && username) {\n    return {\n      id: userId || `user_${Date.now()}`,\n      role: 'user',\n      username: username,\n      loginMethod: 'face'\n    };\n  }\n\n  // If specifically looking for an Asha Worker login (secondary role-based login)\n  if (userId && sessionStorage.getItem('userRole') === 'ashaWorker') {\n    return {\n      id: userId,\n      role: 'ashaWorker',\n      username: sessionStorage.getItem('workerName') || sessionStorage.getItem('userEmail') || 'Asha Worker'\n    };\n  }\n\n  // Check local storage as fallback (for persistent auth)\n  try {\n    const localUser = localStorage.getItem('user');\n    if (localUser) {\n      const userData = JSON.parse(localUser);\n      return {\n        id: userData.id || userData.userId,\n        username: userData.username || 'User',\n        role: userData.role || 'user'\n      };\n    }\n  } catch (error) {\n    console.error(\"Error parsing user data from localStorage:\", error);\n  }\n  return null;\n};\n\n/**\r\n * Check if user is authenticated\r\n * @returns {boolean} True if user is logged in\r\n */\nexport const isAuthenticated = () => {\n  return getLoggedInUser() !== null;\n};\n\n/**\r\n * Check if user is authenticated as an Asha worker\r\n * @returns {boolean} True if logged in as an Asha worker\r\n */\nexport const isAshaWorker = () => {\n  const user = getLoggedInUser();\n  return user !== null && user.role === 'ashaWorker';\n};\n\n/**\r\n * Get the current user's display name\r\n * @returns {string} Username or default text if not logged in\r\n */\nexport const getDisplayName = () => {\n  const user = getLoggedInUser();\n  return user ? user.username : 'Guest';\n};\n\n/**\r\n * Log out the current user by clearing session and local storage\r\n */\nexport const logoutUser = () => {\n  // Clear session storage\n  sessionStorage.removeItem('authenticated');\n  sessionStorage.removeItem('userId');\n  sessionStorage.removeItem('username');\n  sessionStorage.removeItem('userEmail');\n  sessionStorage.removeItem('loginMethod');\n  sessionStorage.removeItem('loginTime');\n  sessionStorage.removeItem('userRole');\n  sessionStorage.removeItem('workerName');\n  sessionStorage.removeItem('workerDistrict');\n\n  // Clear localStorage data\n  localStorage.removeItem('user');\n\n  // Return true to indicate successful logout\n  return true;\n};","map":{"version":3,"names":["getLoggedInUser","authenticated","sessionStorage","getItem","userId","username","id","Date","now","role","loginMethod","localUser","localStorage","userData","JSON","parse","error","console","isAuthenticated","isAshaWorker","user","getDisplayName","logoutUser","removeItem"],"sources":["D:/Movies/Aniket/test2/test/src/utils/authUtils.js"],"sourcesContent":["/**\r\n * Utility functions for authentication\r\n */\r\n\r\n/**\r\n * Check if user is logged in by examining session and local storage\r\n * @returns {Object|null} User object if logged in, null if not\r\n */\r\nexport const getLoggedInUser = () => {\r\n  // Check if this is a regular user with face authentication\r\n  const authenticated = sessionStorage.getItem('authenticated') === 'true';\r\n  const userId = sessionStorage.getItem('userId');\r\n  const username = sessionStorage.getItem('username');\r\n  \r\n  // For face auth login (primary method)\r\n  if (authenticated && username) {\r\n    return {\r\n      id: userId || `user_${Date.now()}`,\r\n      role: 'user',\r\n      username: username,\r\n      loginMethod: 'face'\r\n    };\r\n  }\r\n  \r\n  // If specifically looking for an Asha Worker login (secondary role-based login)\r\n  if (userId && sessionStorage.getItem('userRole') === 'ashaWorker') {\r\n    return {\r\n      id: userId,\r\n      role: 'ashaWorker',\r\n      username: sessionStorage.getItem('workerName') || \r\n               sessionStorage.getItem('userEmail') || \r\n               'Asha Worker'\r\n    };\r\n  }\r\n\r\n  // Check local storage as fallback (for persistent auth)\r\n  try {\r\n    const localUser = localStorage.getItem('user');\r\n    if (localUser) {\r\n      const userData = JSON.parse(localUser);\r\n      return {\r\n        id: userData.id || userData.userId,\r\n        username: userData.username || 'User',\r\n        role: userData.role || 'user'\r\n      };\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error parsing user data from localStorage:\", error);\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\n/**\r\n * Check if user is authenticated\r\n * @returns {boolean} True if user is logged in\r\n */\r\nexport const isAuthenticated = () => {\r\n  return getLoggedInUser() !== null;\r\n};\r\n\r\n/**\r\n * Check if user is authenticated as an Asha worker\r\n * @returns {boolean} True if logged in as an Asha worker\r\n */\r\nexport const isAshaWorker = () => {\r\n  const user = getLoggedInUser();\r\n  return user !== null && user.role === 'ashaWorker';\r\n};\r\n\r\n/**\r\n * Get the current user's display name\r\n * @returns {string} Username or default text if not logged in\r\n */\r\nexport const getDisplayName = () => {\r\n  const user = getLoggedInUser();\r\n  return user ? user.username : 'Guest';\r\n};\r\n\r\n/**\r\n * Log out the current user by clearing session and local storage\r\n */\r\nexport const logoutUser = () => {\r\n  // Clear session storage\r\n  sessionStorage.removeItem('authenticated');\r\n  sessionStorage.removeItem('userId');\r\n  sessionStorage.removeItem('username');\r\n  sessionStorage.removeItem('userEmail');\r\n  sessionStorage.removeItem('loginMethod');\r\n  sessionStorage.removeItem('loginTime');\r\n  sessionStorage.removeItem('userRole');\r\n  sessionStorage.removeItem('workerName');\r\n  sessionStorage.removeItem('workerDistrict');\r\n  \r\n  // Clear localStorage data\r\n  localStorage.removeItem('user');\r\n  \r\n  // Return true to indicate successful logout\r\n  return true;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}