{"ast":null,"code":"import { createUserWithEmailAndPassword, signInWithEmailAndPassword, updateProfile, signOut } from 'firebase/auth';\nimport { doc, setDoc, getDoc, updateDoc, serverTimestamp } from 'firebase/firestore';\nimport { auth, db } from './config';\n\n/**\r\n * Register a new user with email and password\r\n * @param {string} email - User email\r\n * @param {string} password - User password\r\n * @param {string} username - Username for display\r\n * @param {boolean} hasFaceAuth - Whether user has set up face authentication\r\n * @returns {Promise<Object>} - User data including firebase UID\r\n */\nexport const registerUser = async (email, password, username, hasFaceAuth = false) => {\n  try {\n    console.log(\"Attempting to register user with Firebase:\", email);\n\n    // Create the user in localStorage first as fallback\n    const userId = `local_${Date.now()}`;\n    const localUserData = {\n      userId,\n      email,\n      username,\n      hasFaceAuth,\n      createdAt: new Date().toISOString(),\n      lastLogin: new Date().toISOString(),\n      isLocalOnly: true // Flag to indicate this is a local user\n    };\n    try {\n      // Try Firebase first\n      const userCredential = await createUserWithEmailAndPassword(auth, email, password);\n      const user = userCredential.user;\n\n      // Update the user profile to include the username\n      await updateProfile(user, {\n        displayName: username\n      });\n\n      // Create user document in Firestore\n      const userData = {\n        userId: user.uid,\n        email: user.email,\n        username,\n        hasFaceAuth,\n        createdAt: serverTimestamp(),\n        lastLogin: serverTimestamp(),\n        isLocalOnly: false\n      };\n      await setDoc(doc(db, 'users', user.uid), userData);\n      console.log('User registered successfully with Firebase:', user.uid);\n      return {\n        ...userData,\n        userId: user.uid,\n        createdAt: new Date().toISOString()\n      };\n    } catch (firebaseError) {\n      console.warn('Firebase registration failed, falling back to local storage:', firebaseError.message);\n\n      // Save to localStorage as fallback\n      const existingUsers = JSON.parse(localStorage.getItem('user_data') || '[]');\n      existingUsers.push(localUserData);\n      localStorage.setItem('user_data', JSON.stringify(existingUsers));\n      console.log('User registered with local storage:', userId);\n      return localUserData;\n    }\n  } catch (error) {\n    console.error('Error registering user:', error);\n    throw error;\n  }\n};\n\n/**\r\n * Sign in a user with email and password\r\n * @param {string} email - User email\r\n * @param {string} password - User password\r\n * @returns {Promise<Object>} - User data\r\n */\nexport const signInUser = async (email, password) => {\n  try {\n    const userCredential = await signInWithEmailAndPassword(auth, email, password);\n    const user = userCredential.user;\n\n    // Update last login timestamp in Firestore\n    const userRef = doc(db, 'users', user.uid);\n    await updateDoc(userRef, {\n      lastLogin: serverTimestamp()\n    });\n\n    // Get full user data\n    const userDoc = await getDoc(userRef);\n    if (userDoc.exists()) {\n      const userData = userDoc.data();\n      console.log('User signed in successfully:', user.uid);\n      return userData;\n    } else {\n      throw new Error('User document not found in database');\n    }\n  } catch (error) {\n    console.error('Error signing in:', error);\n    throw error;\n  }\n};\n\n/**\r\n * Update user's face authentication status\r\n * @param {string} userId - User ID\r\n * @param {boolean} hasFaceAuth - Whether user has face auth enabled\r\n */\nexport const updateFaceAuthStatus = async (userId, hasFaceAuth) => {\n  try {\n    const userRef = doc(db, 'users', userId);\n    await updateDoc(userRef, {\n      hasFaceAuth,\n      lastUpdated: serverTimestamp()\n    });\n    console.log(`Face auth status updated for user ${userId}: ${hasFaceAuth}`);\n    return true;\n  } catch (error) {\n    console.error('Error updating face auth status:', error);\n    return false;\n  }\n};\n\n/**\r\n * Sign out the current user\r\n */\nexport const signOutUser = async () => {\n  try {\n    await signOut(auth);\n    console.log('User signed out successfully');\n    return true;\n  } catch (error) {\n    console.error('Error signing out:', error);\n    return false;\n  }\n};\n\n/**\r\n * Get the current signed-in user\r\n * @returns {Object|null} - The current user or null if not signed in\r\n */\nexport const getCurrentUser = () => {\n  return auth.currentUser;\n};\n\n/**\r\n * Get user data from Firestore\r\n * @param {string} userId - User ID\r\n * @returns {Promise<Object|null>} - User data or null if not found\r\n */\nexport const getUserData = async userId => {\n  try {\n    const userRef = doc(db, 'users', userId);\n    const userDoc = await getDoc(userRef);\n    if (userDoc.exists()) {\n      return userDoc.data();\n    }\n    return null;\n  } catch (error) {\n    console.error('Error getting user data:', error);\n    return null;\n  }\n};","map":{"version":3,"names":["createUserWithEmailAndPassword","signInWithEmailAndPassword","updateProfile","signOut","doc","setDoc","getDoc","updateDoc","serverTimestamp","auth","db","registerUser","email","password","username","hasFaceAuth","console","log","userId","Date","now","localUserData","createdAt","toISOString","lastLogin","isLocalOnly","userCredential","user","displayName","userData","uid","firebaseError","warn","message","existingUsers","JSON","parse","localStorage","getItem","push","setItem","stringify","error","signInUser","userRef","userDoc","exists","data","Error","updateFaceAuthStatus","lastUpdated","signOutUser","getCurrentUser","currentUser","getUserData"],"sources":["D:/Movies/Aniket/test2/test/src/firebase/authService.js"],"sourcesContent":["import { \r\n  createUserWithEmailAndPassword, \r\n  signInWithEmailAndPassword,\r\n  updateProfile,\r\n  signOut\r\n} from 'firebase/auth';\r\nimport { doc, setDoc, getDoc, updateDoc, serverTimestamp } from 'firebase/firestore';\r\nimport { auth, db } from './config';\r\n\r\n/**\r\n * Register a new user with email and password\r\n * @param {string} email - User email\r\n * @param {string} password - User password\r\n * @param {string} username - Username for display\r\n * @param {boolean} hasFaceAuth - Whether user has set up face authentication\r\n * @returns {Promise<Object>} - User data including firebase UID\r\n */\r\nexport const registerUser = async (email, password, username, hasFaceAuth = false) => {\r\n  try {\r\n    console.log(\"Attempting to register user with Firebase:\", email);\r\n    \r\n    // Create the user in localStorage first as fallback\r\n    const userId = `local_${Date.now()}`;\r\n    const localUserData = {\r\n      userId,\r\n      email,\r\n      username,\r\n      hasFaceAuth,\r\n      createdAt: new Date().toISOString(),\r\n      lastLogin: new Date().toISOString(),\r\n      isLocalOnly: true // Flag to indicate this is a local user\r\n    };\r\n    \r\n    try {\r\n      // Try Firebase first\r\n      const userCredential = await createUserWithEmailAndPassword(auth, email, password);\r\n      const user = userCredential.user;\r\n      \r\n      // Update the user profile to include the username\r\n      await updateProfile(user, { displayName: username });\r\n      \r\n      // Create user document in Firestore\r\n      const userData = {\r\n        userId: user.uid,\r\n        email: user.email,\r\n        username,\r\n        hasFaceAuth,\r\n        createdAt: serverTimestamp(),\r\n        lastLogin: serverTimestamp(),\r\n        isLocalOnly: false\r\n      };\r\n      \r\n      await setDoc(doc(db, 'users', user.uid), userData);\r\n      console.log('User registered successfully with Firebase:', user.uid);\r\n      \r\n      return {\r\n        ...userData,\r\n        userId: user.uid,\r\n        createdAt: new Date().toISOString()\r\n      };\r\n    } catch (firebaseError) {\r\n      console.warn('Firebase registration failed, falling back to local storage:', firebaseError.message);\r\n      \r\n      // Save to localStorage as fallback\r\n      const existingUsers = JSON.parse(localStorage.getItem('user_data') || '[]');\r\n      existingUsers.push(localUserData);\r\n      localStorage.setItem('user_data', JSON.stringify(existingUsers));\r\n      \r\n      console.log('User registered with local storage:', userId);\r\n      return localUserData;\r\n    }\r\n  } catch (error) {\r\n    console.error('Error registering user:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Sign in a user with email and password\r\n * @param {string} email - User email\r\n * @param {string} password - User password\r\n * @returns {Promise<Object>} - User data\r\n */\r\nexport const signInUser = async (email, password) => {\r\n  try {\r\n    const userCredential = await signInWithEmailAndPassword(auth, email, password);\r\n    const user = userCredential.user;\r\n    \r\n    // Update last login timestamp in Firestore\r\n    const userRef = doc(db, 'users', user.uid);\r\n    await updateDoc(userRef, {\r\n      lastLogin: serverTimestamp()\r\n    });\r\n    \r\n    // Get full user data\r\n    const userDoc = await getDoc(userRef);\r\n    if (userDoc.exists()) {\r\n      const userData = userDoc.data();\r\n      console.log('User signed in successfully:', user.uid);\r\n      return userData;\r\n    } else {\r\n      throw new Error('User document not found in database');\r\n    }\r\n  } catch (error) {\r\n    console.error('Error signing in:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Update user's face authentication status\r\n * @param {string} userId - User ID\r\n * @param {boolean} hasFaceAuth - Whether user has face auth enabled\r\n */\r\nexport const updateFaceAuthStatus = async (userId, hasFaceAuth) => {\r\n  try {\r\n    const userRef = doc(db, 'users', userId);\r\n    await updateDoc(userRef, {\r\n      hasFaceAuth,\r\n      lastUpdated: serverTimestamp()\r\n    });\r\n    console.log(`Face auth status updated for user ${userId}: ${hasFaceAuth}`);\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error updating face auth status:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n/**\r\n * Sign out the current user\r\n */\r\nexport const signOutUser = async () => {\r\n  try {\r\n    await signOut(auth);\r\n    console.log('User signed out successfully');\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error signing out:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n/**\r\n * Get the current signed-in user\r\n * @returns {Object|null} - The current user or null if not signed in\r\n */\r\nexport const getCurrentUser = () => {\r\n  return auth.currentUser;\r\n};\r\n\r\n/**\r\n * Get user data from Firestore\r\n * @param {string} userId - User ID\r\n * @returns {Promise<Object|null>} - User data or null if not found\r\n */\r\nexport const getUserData = async (userId) => {\r\n  try {\r\n    const userRef = doc(db, 'users', userId);\r\n    const userDoc = await getDoc(userRef);\r\n    if (userDoc.exists()) {\r\n      return userDoc.data();\r\n    }\r\n    return null;\r\n  } catch (error) {\r\n    console.error('Error getting user data:', error);\r\n    return null;\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}