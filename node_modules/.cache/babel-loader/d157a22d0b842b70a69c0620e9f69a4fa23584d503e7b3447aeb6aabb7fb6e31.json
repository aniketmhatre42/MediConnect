{"ast":null,"code":"import { initializeApp } from \"firebase/app\";\nimport { getAuth } from \"firebase/auth\";\nimport { getDatabase } from \"firebase/database\";\nimport { getStorage } from \"firebase/storage\";\nimport { getFirestore } from \"firebase/firestore\";\nimport { getAnalytics } from \"firebase/analytics\";\nimport { initializeFirebase } from './initFirebase';\n\n// Declare variables at the top level\nlet app = null;\nlet auth = null;\nlet rtdb = null;\nlet db = null;\nlet storage = null;\nlet analytics = null;\n\n// Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDVMRkS8_vRfgb41wOlxzieECZdgr1IRRk\",\n  authDomain: \"mediconnect-f6040.firebaseapp.com\",\n  projectId: \"mediconnect-f6040\",\n  storageBucket: \"mediconnect-f6040.firebasestorage.app\",\n  messagingSenderId: \"967220854368\",\n  appId: \"1:967220854368:web:6b7a4438b20aba8caccd05\",\n  measurementId: \"G-85XEWLEHXS\",\n  databaseURL: \"https://mediconnect-f6040-default-rtdb.firebaseio.com\"\n};\n\n// Log config details (without sensitive data)\nconsole.log(\"Firebase configuration loaded:\", {\n  projectId: firebaseConfig.projectId,\n  databaseURL: firebaseConfig.databaseURL\n});\n\n// Try to initialize Firebase with robust error handling\ntry {\n  const result = initializeFirebase(firebaseConfig);\n\n  // Assign the initialized services to our variables\n  app = result.app;\n  auth = result.auth;\n  rtdb = result.database;\n  db = getFirestore(app);\n  storage = getStorage(app);\n\n  // Only initialize analytics in production to avoid console errors\n  if (process.env.NODE_ENV === 'production') {\n    try {\n      analytics = getAnalytics(app);\n    } catch (analyticsError) {\n      console.warn(\"Analytics initialization failed:\", analyticsError.message);\n    }\n  }\n\n  // Monitor database connection state\n  if (rtdb) {\n    const {\n      ref,\n      onValue\n    } = require('firebase/database');\n    const connectedRef = ref(rtdb, '.info/connected');\n    onValue(connectedRef, snap => {\n      if (snap.val() === true) {\n        console.log(\"Connected to Firebase Realtime Database\");\n      } else {\n        console.warn(\"Disconnected from Firebase Realtime Database\");\n      }\n    });\n  }\n} catch (initError) {\n  console.error(\"CRITICAL: Firebase initialization failed\", initError);\n\n  // Create fallbacks to prevent app crashes\n  const errorHandler = () => {\n    console.error(\"Firebase operation attempted but Firebase failed to initialize\");\n    return null;\n  };\n\n  // Keep the exported variables as null or provide mock implementations\n  auth = {\n    currentUser: null,\n    onAuthStateChanged: () => () => {}\n  };\n  rtdb = {\n    ref: errorHandler\n  };\n  db = {\n    collection: errorHandler\n  };\n  storage = {\n    ref: errorHandler\n  };\n\n  // Inform the user\n  setTimeout(() => {\n    alert(\"Firebase connection failed. Some features may not work properly. Please check console for details.\");\n  }, 2000);\n}\n\n// Export the services\nexport { auth, rtdb, db, storage, analytics };\nexport default app;","map":{"version":3,"names":["initializeApp","getAuth","getDatabase","getStorage","getFirestore","getAnalytics","initializeFirebase","app","auth","rtdb","db","storage","analytics","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","databaseURL","console","log","result","database","process","env","NODE_ENV","analyticsError","warn","message","ref","onValue","require","connectedRef","snap","val","initError","error","errorHandler","currentUser","onAuthStateChanged","collection","setTimeout","alert"],"sources":["D:/Movies/Aniket/test2/test/src/firebase/config.js"],"sourcesContent":["import { initializeApp } from \"firebase/app\";\r\nimport { getAuth } from \"firebase/auth\";\r\nimport { getDatabase } from \"firebase/database\";\r\nimport { getStorage } from \"firebase/storage\";\r\nimport { getFirestore } from \"firebase/firestore\";\r\nimport { getAnalytics } from \"firebase/analytics\";\r\nimport { initializeFirebase } from './initFirebase';\r\n\r\n// Declare variables at the top level\r\nlet app = null;\r\nlet auth = null;\r\nlet rtdb = null;\r\nlet db = null;\r\nlet storage = null;\r\nlet analytics = null;\r\n\r\n// Firebase configuration\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyDVMRkS8_vRfgb41wOlxzieECZdgr1IRRk\",\r\n  authDomain: \"mediconnect-f6040.firebaseapp.com\",\r\n  projectId: \"mediconnect-f6040\",\r\n  storageBucket: \"mediconnect-f6040.firebasestorage.app\",\r\n  messagingSenderId: \"967220854368\",\r\n  appId: \"1:967220854368:web:6b7a4438b20aba8caccd05\",\r\n  measurementId: \"G-85XEWLEHXS\",\r\n  databaseURL: \"https://mediconnect-f6040-default-rtdb.firebaseio.com\"\r\n};\r\n\r\n// Log config details (without sensitive data)\r\nconsole.log(\"Firebase configuration loaded:\", {\r\n  projectId: firebaseConfig.projectId,\r\n  databaseURL: firebaseConfig.databaseURL\r\n});\r\n\r\n// Try to initialize Firebase with robust error handling\r\ntry {\r\n  const result = initializeFirebase(firebaseConfig);\r\n  \r\n  // Assign the initialized services to our variables\r\n  app = result.app;\r\n  auth = result.auth;\r\n  rtdb = result.database;\r\n  db = getFirestore(app);\r\n  storage = getStorage(app);\r\n  \r\n  // Only initialize analytics in production to avoid console errors\r\n  if (process.env.NODE_ENV === 'production') {\r\n    try {\r\n      analytics = getAnalytics(app);\r\n    } catch (analyticsError) {\r\n      console.warn(\"Analytics initialization failed:\", analyticsError.message);\r\n    }\r\n  }\r\n  \r\n  // Monitor database connection state\r\n  if (rtdb) {\r\n    const { ref, onValue } = require('firebase/database');\r\n    const connectedRef = ref(rtdb, '.info/connected');\r\n    onValue(connectedRef, (snap) => {\r\n      if (snap.val() === true) {\r\n        console.log(\"Connected to Firebase Realtime Database\");\r\n      } else {\r\n        console.warn(\"Disconnected from Firebase Realtime Database\");\r\n      }\r\n    });\r\n  }\r\n} catch (initError) {\r\n  console.error(\"CRITICAL: Firebase initialization failed\", initError);\r\n  \r\n  // Create fallbacks to prevent app crashes\r\n  const errorHandler = () => {\r\n    console.error(\"Firebase operation attempted but Firebase failed to initialize\");\r\n    return null;\r\n  };\r\n  \r\n  // Keep the exported variables as null or provide mock implementations\r\n  auth = { currentUser: null, onAuthStateChanged: () => () => {} };\r\n  rtdb = { ref: errorHandler };\r\n  db = { collection: errorHandler };\r\n  storage = { ref: errorHandler };\r\n  \r\n  // Inform the user\r\n  setTimeout(() => {\r\n    alert(\"Firebase connection failed. Some features may not work properly. Please check console for details.\");\r\n  }, 2000);\r\n}\r\n\r\n// Export the services\r\nexport { auth, rtdb, db, storage, analytics };\r\nexport default app;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}