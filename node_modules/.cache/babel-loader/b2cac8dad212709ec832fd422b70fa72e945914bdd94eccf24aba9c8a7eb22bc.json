{"ast":null,"code":"const LOCAL_STORAGE_KEYS = {\n  FACE_DESCRIPTORS: 'face_descriptors',\n  USER_DATA: 'user_data'\n};\nexport const saveFaceDescriptor = (userId, descriptor) => {\n  try {\n    console.log(`Saving face descriptor for user ${userId}`);\n\n    // Ensure descriptor is properly converted to Array\n    const descriptorArray = Array.from(descriptor);\n    const faceData = {\n      userId,\n      descriptor: descriptorArray,\n      timestamp: new Date().toISOString()\n    };\n\n    // Get existing descriptors\n    let existingData;\n    try {\n      const storedData = localStorage.getItem(LOCAL_STORAGE_KEYS.FACE_DESCRIPTORS);\n      console.log(`Retrieved stored face data: ${storedData ? 'Found' : 'Not found'}`);\n      existingData = storedData ? JSON.parse(storedData) : [];\n      if (!Array.isArray(existingData)) {\n        console.warn('Stored face descriptors is not an array, resetting');\n        existingData = [];\n      }\n    } catch (e) {\n      console.warn('Error parsing stored face descriptors, resetting', e);\n      existingData = [];\n    }\n\n    // Check if user already has a descriptor and update it\n    const existingIndex = existingData.findIndex(item => item.userId === userId);\n    if (existingIndex >= 0) {\n      console.log(`Updating existing face descriptor for user ${userId}`);\n      existingData[existingIndex] = faceData;\n    } else {\n      console.log(`Adding new face descriptor for user ${userId}`);\n      existingData.push(faceData);\n    }\n\n    // Save the updated data\n    const dataToSave = JSON.stringify(existingData);\n    localStorage.setItem(LOCAL_STORAGE_KEYS.FACE_DESCRIPTORS, dataToSave);\n\n    // Verify data was saved correctly\n    const verifyData = localStorage.getItem(LOCAL_STORAGE_KEYS.FACE_DESCRIPTORS);\n    console.log(`Face data saved successfully. Data size: ${(verifyData === null || verifyData === void 0 ? void 0 : verifyData.length) || 0} characters`);\n    console.log(`Total face descriptors stored: ${existingData.length}`);\n    return true;\n  } catch (error) {\n    console.error('Error saving face descriptor:', error);\n    return false;\n  }\n};\nexport const getFaceDescriptor = userId => {\n  try {\n    const allDescriptors = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEYS.FACE_DESCRIPTORS) || '[]');\n    const userDescriptor = allDescriptors.find(data => data.userId === userId);\n    return userDescriptor ? new Float32Array(userDescriptor.descriptor) : null;\n  } catch (error) {\n    console.error('Error getting face descriptor:', error);\n    return null;\n  }\n};\nexport const saveUserData = userData => {\n  try {\n    const existingUsers = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEYS.USER_DATA) || '[]');\n    existingUsers.push(userData);\n    localStorage.setItem(LOCAL_STORAGE_KEYS.USER_DATA, JSON.stringify(existingUsers));\n    return true;\n  } catch (error) {\n    console.error('Error saving user data:', error);\n    return false;\n  }\n};","map":{"version":3,"names":["LOCAL_STORAGE_KEYS","FACE_DESCRIPTORS","USER_DATA","saveFaceDescriptor","userId","descriptor","console","log","descriptorArray","Array","from","faceData","timestamp","Date","toISOString","existingData","storedData","localStorage","getItem","JSON","parse","isArray","warn","e","existingIndex","findIndex","item","push","dataToSave","stringify","setItem","verifyData","length","error","getFaceDescriptor","allDescriptors","userDescriptor","find","data","Float32Array","saveUserData","userData","existingUsers"],"sources":["D:/Movies/Aniket/test2/test/src/services/localStorageService.js"],"sourcesContent":["const LOCAL_STORAGE_KEYS = {\r\n  FACE_DESCRIPTORS: 'face_descriptors',\r\n  USER_DATA: 'user_data'\r\n};\r\n\r\nexport const saveFaceDescriptor = (userId, descriptor) => {\r\n  try {\r\n    console.log(`Saving face descriptor for user ${userId}`);\r\n    \r\n    // Ensure descriptor is properly converted to Array\r\n    const descriptorArray = Array.from(descriptor);\r\n    \r\n    const faceData = {\r\n      userId,\r\n      descriptor: descriptorArray,\r\n      timestamp: new Date().toISOString()\r\n    };\r\n    \r\n    // Get existing descriptors\r\n    let existingData;\r\n    try {\r\n      const storedData = localStorage.getItem(LOCAL_STORAGE_KEYS.FACE_DESCRIPTORS);\r\n      console.log(`Retrieved stored face data: ${storedData ? 'Found' : 'Not found'}`);\r\n      \r\n      existingData = storedData ? JSON.parse(storedData) : [];\r\n      if (!Array.isArray(existingData)) {\r\n        console.warn('Stored face descriptors is not an array, resetting');\r\n        existingData = [];\r\n      }\r\n    } catch (e) {\r\n      console.warn('Error parsing stored face descriptors, resetting', e);\r\n      existingData = [];\r\n    }\r\n    \r\n    // Check if user already has a descriptor and update it\r\n    const existingIndex = existingData.findIndex(item => item.userId === userId);\r\n    if (existingIndex >= 0) {\r\n      console.log(`Updating existing face descriptor for user ${userId}`);\r\n      existingData[existingIndex] = faceData;\r\n    } else {\r\n      console.log(`Adding new face descriptor for user ${userId}`);\r\n      existingData.push(faceData);\r\n    }\r\n    \r\n    // Save the updated data\r\n    const dataToSave = JSON.stringify(existingData);\r\n    localStorage.setItem(LOCAL_STORAGE_KEYS.FACE_DESCRIPTORS, dataToSave);\r\n    \r\n    // Verify data was saved correctly\r\n    const verifyData = localStorage.getItem(LOCAL_STORAGE_KEYS.FACE_DESCRIPTORS);\r\n    console.log(`Face data saved successfully. Data size: ${verifyData?.length || 0} characters`);\r\n    console.log(`Total face descriptors stored: ${existingData.length}`);\r\n    \r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error saving face descriptor:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\nexport const getFaceDescriptor = (userId) => {\r\n  try {\r\n    const allDescriptors = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEYS.FACE_DESCRIPTORS) || '[]');\r\n    const userDescriptor = allDescriptors.find(data => data.userId === userId);\r\n    return userDescriptor ? new Float32Array(userDescriptor.descriptor) : null;\r\n  } catch (error) {\r\n    console.error('Error getting face descriptor:', error);\r\n    return null;\r\n  }\r\n};\r\n\r\nexport const saveUserData = (userData) => {\r\n  try {\r\n    const existingUsers = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEYS.USER_DATA) || '[]');\r\n    existingUsers.push(userData);\r\n    localStorage.setItem(LOCAL_STORAGE_KEYS.USER_DATA, JSON.stringify(existingUsers));\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error saving user data:', error);\r\n    return false;\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}