{"ast":null,"code":"var _jsxFileName = \"D:\\\\Movies\\\\Aniket\\\\test2\\\\test\\\\src\\\\Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport \"./Chatbot.css\";\n\n// Simple chatbot component without authentication requirements\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbot = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState(\"\");\n  const [isTyping, setIsTyping] = useState(false);\n  const messagesEndRef = useRef(null);\n\n  // Display welcome message when component mounts\n  useEffect(() => {\n    if (messages.length === 0) {\n      setIsTyping(true);\n\n      // Get username if available, otherwise use generic greeting\n      const username = localStorage.getItem('username') || sessionStorage.getItem('username') || 'there';\n      setTimeout(() => {\n        setMessages([{\n          text: `Hello ${username}! I'm your MediConnect AI assistant. How can I help you today?`,\n          sender: \"bot\"\n        }]);\n        setIsTyping(false);\n      }, 1000);\n    }\n  }, [messages.length]);\n\n  // Auto-scroll to bottom when messages change\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  }, [messages]);\n\n  // Handle sending a message\n  const sendMessage = () => {\n    if (input.trim() === \"\") return;\n    const userMessage = {\n      text: input,\n      sender: \"user\"\n    };\n    setMessages(prev => [...prev, userMessage]);\n    setInput(\"\");\n    setIsTyping(true);\n\n    // Simulate bot response after delay\n    setTimeout(() => {\n      const botResponse = {\n        text: \"This is a demo response. In a real application, this would be generated by an AI model.\",\n        sender: \"bot\"\n      };\n      setMessages(prev => [...prev, botResponse]);\n      setIsTyping(false);\n    }, 1000);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-window\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"MediConnect AI Assistant\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-messages\",\n        children: [messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message ${message.sender}`,\n          children: message.text\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 13\n        }, this)), isTyping && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"typing-indicator\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: messagesEndRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-input-area\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Type a message...\",\n          value: input,\n          onChange: e => setInput(e.target.value),\n          onKeyPress: e => {\n            if (e.key === \"Enter\") {\n              sendMessage();\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: sendMessage,\n          disabled: isTyping || input.trim() === \"\",\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbot, \"y+n9Ho6B23MRn5kcdfXSJfzUP4U=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","Chatbot","_s","messages","setMessages","input","setInput","isTyping","setIsTyping","messagesEndRef","length","username","localStorage","getItem","sessionStorage","setTimeout","text","sender","_messagesEndRef$curre","current","scrollIntoView","behavior","sendMessage","trim","userMessage","prev","botResponse","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","message","index","ref","type","placeholder","value","onChange","e","target","onKeyPress","key","onClick","disabled","_c","$RefreshReg$"],"sources":["D:/Movies/Aniket/test2/test/src/Chatbot.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport \"./Chatbot.css\";\r\n\r\n// Simple chatbot component without authentication requirements\r\nconst Chatbot = () => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [input, setInput] = useState(\"\");\r\n  const [isTyping, setIsTyping] = useState(false);\r\n  const messagesEndRef = useRef(null);\r\n  \r\n  // Display welcome message when component mounts\r\n  useEffect(() => {\r\n    if (messages.length === 0) {\r\n      setIsTyping(true);\r\n      \r\n      // Get username if available, otherwise use generic greeting\r\n      const username = localStorage.getItem('username') || \r\n                       sessionStorage.getItem('username') || \r\n                       'there';\r\n      \r\n      setTimeout(() => {\r\n        setMessages([{\r\n          text: `Hello ${username}! I'm your MediConnect AI assistant. How can I help you today?`,\r\n          sender: \"bot\"\r\n        }]);\r\n        setIsTyping(false);\r\n      }, 1000);\r\n    }\r\n  }, [messages.length]);\r\n  \r\n  // Auto-scroll to bottom when messages change\r\n  useEffect(() => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n  }, [messages]);\r\n  \r\n  // Handle sending a message\r\n  const sendMessage = () => {\r\n    if (input.trim() === \"\") return;\r\n    \r\n    const userMessage = {\r\n      text: input,\r\n      sender: \"user\"\r\n    };\r\n    \r\n    setMessages(prev => [...prev, userMessage]);\r\n    setInput(\"\");\r\n    setIsTyping(true);\r\n    \r\n    // Simulate bot response after delay\r\n    setTimeout(() => {\r\n      const botResponse = {\r\n        text: \"This is a demo response. In a real application, this would be generated by an AI model.\",\r\n        sender: \"bot\"\r\n      };\r\n      setMessages(prev => [...prev, botResponse]);\r\n      setIsTyping(false);\r\n    }, 1000);\r\n  };\r\n  \r\n  return (\r\n    <div className=\"chatbot-container\">\r\n      <div className=\"chatbot-window\">\r\n        <h2>MediConnect AI Assistant</h2>\r\n        \r\n        <div className=\"chat-messages\">\r\n          {messages.map((message, index) => (\r\n            <div \r\n              key={index} \r\n              className={`message ${message.sender}`}\r\n            >\r\n              {message.text}\r\n            </div>\r\n          ))}\r\n          \r\n          {isTyping && (\r\n            <div className=\"typing-indicator\">\r\n              <span></span>\r\n              <span></span>\r\n              <span></span>\r\n            </div>\r\n          )}\r\n          \r\n          <div ref={messagesEndRef} />\r\n        </div>\r\n        \r\n        <div className=\"chat-input-area\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Type a message...\"\r\n            value={input}\r\n            onChange={(e) => setInput(e.target.value)}\r\n            onKeyPress={(e) => {\r\n              if (e.key === \"Enter\") {\r\n                sendMessage();\r\n              }\r\n            }}\r\n          />\r\n          <button \r\n            onClick={sendMessage} \r\n            disabled={isTyping || input.trim() === \"\"}\r\n          >\r\n            Send\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chatbot;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}