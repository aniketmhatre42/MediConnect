{"ast":null,"code":"import { ref, set, get, remove, onDisconnect, push, serverTimestamp } from \"firebase/database\";\nimport { rtdb } from \"../firebase/config\";\n\n// Reference to faces in Firebase Realtime Database\nconst FACES_REF = \"faces\";\nconst DEBUG_REF = \"debug\";\n\n/**\r\n * Save face descriptor to Firebase Realtime Database\r\n * @param {string} userId - User ID\r\n * @param {Float32Array} descriptor - Face descriptor data\r\n * @returns {Promise<boolean>} Success status\r\n */\nexport const saveFaceToFirebase = async (userId, descriptor) => {\n  try {\n    if (!userId || !descriptor) {\n      console.error(\"Missing required parameters for saving face data\");\n      return false;\n    }\n    console.log(`Attempting to save face data to Firebase for user ${userId}...`);\n\n    // Verify rtdb is initialized\n    if (!rtdb) {\n      console.error(\"Firebase Realtime Database not initialized\");\n\n      // Log debug info to help diagnose the issue\n      console.error(\"Firebase app state:\", {\n        rtdbExists: !!rtdb,\n        configIncludesDatabaseURL: !!(rtdb && rtdb.app && rtdb.app.options && rtdb.app.options.databaseURL)\n      });\n      return false;\n    }\n\n    // Convert descriptor to regular array for storage\n    const descriptorArray = Array.from(descriptor);\n\n    // First log a test entry to make sure we can write to the database\n    try {\n      const testRef = ref(rtdb, `${DEBUG_REF}/connection_test`);\n      await set(testRef, {\n        timestamp: serverTimestamp(),\n        message: \"Testing database connection\",\n        client: navigator.userAgent\n      });\n      console.log(\"Successfully wrote test data to Firebase\");\n    } catch (testError) {\n      console.error(\"Failed to write test data to Firebase:\", testError);\n      return false;\n    }\n\n    // Create the face data object\n    const faceData = {\n      userId,\n      descriptor: descriptorArray,\n      timestamp: serverTimestamp(),\n      clientTimestamp: new Date().toISOString(),\n      metadata: {\n        userAgent: navigator.userAgent,\n        descriptorLength: descriptorArray.length,\n        descriptorType: \"Float32Array\"\n      }\n    };\n\n    // Use a more specific path with the user ID\n    const faceRef = ref(rtdb, `${FACES_REF}/${userId}`);\n\n    // Store face data\n    await set(faceRef, faceData);\n\n    // Verify the data was written\n    const verifyRef = ref(rtdb, `${FACES_REF}/${userId}`);\n    const snapshot = await get(verifyRef);\n    if (snapshot.exists()) {\n      console.log(`Face descriptor for ${userId} saved and verified in Firebase successfully`);\n      return true;\n    } else {\n      console.error(`Face data was not found after writing for user ${userId}`);\n      return false;\n    }\n  } catch (error) {\n    console.error(\"Error saving face to Firebase:\", error);\n    console.error(\"Error details:\", {\n      code: error.code,\n      message: error.message,\n      stack: error.stack\n    });\n\n    // Additional debugging for permission errors\n    if (error.code === 'PERMISSION_DENIED') {\n      console.error(\"Firebase permission denied. Check database rules.\");\n    }\n    return false;\n  }\n};\n\n/**\r\n * Get face descriptor from Firebase Realtime Database\r\n * @param {string} userId - User ID\r\n * @returns {Promise<Float32Array|null>} Face descriptor or null if not found\r\n */\nexport const getFaceFromFirebase = async userId => {\n  try {\n    if (!userId) {\n      console.error(\"User ID is required to get face data\");\n      return null;\n    }\n    const faceRef = ref(rtdb, `${FACES_REF}/${userId}`);\n    const snapshot = await get(faceRef);\n    if (snapshot.exists()) {\n      const data = snapshot.val();\n      if (data && data.descriptor) {\n        console.log(`Face descriptor for ${userId} retrieved from Firebase`);\n        return new Float32Array(data.descriptor);\n      }\n    }\n    console.log(`No face descriptor found for ${userId} in Firebase`);\n    return null;\n  } catch (error) {\n    console.error(\"Error getting face from Firebase:\", error);\n    return null;\n  }\n};\n\n/**\r\n * Remove face descriptor from Firebase Realtime Database\r\n * @param {string} userId - User ID\r\n * @returns {Promise<boolean>} Success status\r\n */\nexport const removeFaceFromFirebase = async userId => {\n  try {\n    if (!userId) {\n      console.error(\"User ID is required to remove face data\");\n      return false;\n    }\n    const faceRef = ref(rtdb, `${FACES_REF}/${userId}`);\n    await remove(faceRef);\n    console.log(`Face descriptor for ${userId} removed from Firebase`);\n    return true;\n  } catch (error) {\n    console.error(\"Error removing face from Firebase:\", error);\n    return false;\n  }\n};\n\n/**\r\n * Check if user has face data in Firebase\r\n * @param {string} userId - User ID\r\n * @returns {Promise<boolean>} Whether face data exists\r\n */\nexport const hasFaceInFirebase = async userId => {\n  try {\n    if (!userId) return false;\n    const faceRef = ref(rtdb, `${FACES_REF}/${userId}`);\n    const snapshot = await get(faceRef);\n    return snapshot.exists();\n  } catch (error) {\n    console.error(\"Error checking face in Firebase:\", error);\n    return false;\n  }\n};","map":{"version":3,"names":["ref","set","get","remove","onDisconnect","push","serverTimestamp","rtdb","FACES_REF","DEBUG_REF","saveFaceToFirebase","userId","descriptor","console","error","log","rtdbExists","configIncludesDatabaseURL","app","options","databaseURL","descriptorArray","Array","from","testRef","timestamp","message","client","navigator","userAgent","testError","faceData","clientTimestamp","Date","toISOString","metadata","descriptorLength","length","descriptorType","faceRef","verifyRef","snapshot","exists","code","stack","getFaceFromFirebase","data","val","Float32Array","removeFaceFromFirebase","hasFaceInFirebase"],"sources":["D:/Movies/Aniket/test2/test/src/services/firebaseFaceService.js"],"sourcesContent":["import { ref, set, get, remove, onDisconnect, push, serverTimestamp } from \"firebase/database\";\r\nimport { rtdb } from \"../firebase/config\";\r\n\r\n// Reference to faces in Firebase Realtime Database\r\nconst FACES_REF = \"faces\";\r\nconst DEBUG_REF = \"debug\";\r\n\r\n/**\r\n * Save face descriptor to Firebase Realtime Database\r\n * @param {string} userId - User ID\r\n * @param {Float32Array} descriptor - Face descriptor data\r\n * @returns {Promise<boolean>} Success status\r\n */\r\nexport const saveFaceToFirebase = async (userId, descriptor) => {\r\n  try {\r\n    if (!userId || !descriptor) {\r\n      console.error(\"Missing required parameters for saving face data\");\r\n      return false;\r\n    }\r\n\r\n    console.log(`Attempting to save face data to Firebase for user ${userId}...`);\r\n    \r\n    // Verify rtdb is initialized\r\n    if (!rtdb) {\r\n      console.error(\"Firebase Realtime Database not initialized\");\r\n      \r\n      // Log debug info to help diagnose the issue\r\n      console.error(\"Firebase app state:\", {\r\n        rtdbExists: !!rtdb,\r\n        configIncludesDatabaseURL: !!(rtdb && rtdb.app && rtdb.app.options && rtdb.app.options.databaseURL)\r\n      });\r\n      \r\n      return false;\r\n    }\r\n\r\n    // Convert descriptor to regular array for storage\r\n    const descriptorArray = Array.from(descriptor);\r\n    \r\n    // First log a test entry to make sure we can write to the database\r\n    try {\r\n      const testRef = ref(rtdb, `${DEBUG_REF}/connection_test`);\r\n      await set(testRef, {\r\n        timestamp: serverTimestamp(),\r\n        message: \"Testing database connection\",\r\n        client: navigator.userAgent\r\n      });\r\n      console.log(\"Successfully wrote test data to Firebase\");\r\n    } catch (testError) {\r\n      console.error(\"Failed to write test data to Firebase:\", testError);\r\n      return false;\r\n    }\r\n    \r\n    // Create the face data object\r\n    const faceData = {\r\n      userId,\r\n      descriptor: descriptorArray,\r\n      timestamp: serverTimestamp(),\r\n      clientTimestamp: new Date().toISOString(),\r\n      metadata: {\r\n        userAgent: navigator.userAgent,\r\n        descriptorLength: descriptorArray.length,\r\n        descriptorType: \"Float32Array\"\r\n      }\r\n    };\r\n    \r\n    // Use a more specific path with the user ID\r\n    const faceRef = ref(rtdb, `${FACES_REF}/${userId}`);\r\n    \r\n    // Store face data\r\n    await set(faceRef, faceData);\r\n    \r\n    // Verify the data was written\r\n    const verifyRef = ref(rtdb, `${FACES_REF}/${userId}`);\r\n    const snapshot = await get(verifyRef);\r\n    \r\n    if (snapshot.exists()) {\r\n      console.log(`Face descriptor for ${userId} saved and verified in Firebase successfully`);\r\n      return true;\r\n    } else {\r\n      console.error(`Face data was not found after writing for user ${userId}`);\r\n      return false;\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error saving face to Firebase:\", error);\r\n    console.error(\"Error details:\", {\r\n      code: error.code,\r\n      message: error.message,\r\n      stack: error.stack\r\n    });\r\n    \r\n    // Additional debugging for permission errors\r\n    if (error.code === 'PERMISSION_DENIED') {\r\n      console.error(\"Firebase permission denied. Check database rules.\");\r\n    }\r\n    \r\n    return false;\r\n  }\r\n};\r\n\r\n/**\r\n * Get face descriptor from Firebase Realtime Database\r\n * @param {string} userId - User ID\r\n * @returns {Promise<Float32Array|null>} Face descriptor or null if not found\r\n */\r\nexport const getFaceFromFirebase = async (userId) => {\r\n  try {\r\n    if (!userId) {\r\n      console.error(\"User ID is required to get face data\");\r\n      return null;\r\n    }\r\n    \r\n    const faceRef = ref(rtdb, `${FACES_REF}/${userId}`);\r\n    const snapshot = await get(faceRef);\r\n    \r\n    if (snapshot.exists()) {\r\n      const data = snapshot.val();\r\n      if (data && data.descriptor) {\r\n        console.log(`Face descriptor for ${userId} retrieved from Firebase`);\r\n        return new Float32Array(data.descriptor);\r\n      }\r\n    }\r\n    \r\n    console.log(`No face descriptor found for ${userId} in Firebase`);\r\n    return null;\r\n  } catch (error) {\r\n    console.error(\"Error getting face from Firebase:\", error);\r\n    return null;\r\n  }\r\n};\r\n\r\n/**\r\n * Remove face descriptor from Firebase Realtime Database\r\n * @param {string} userId - User ID\r\n * @returns {Promise<boolean>} Success status\r\n */\r\nexport const removeFaceFromFirebase = async (userId) => {\r\n  try {\r\n    if (!userId) {\r\n      console.error(\"User ID is required to remove face data\");\r\n      return false;\r\n    }\r\n    \r\n    const faceRef = ref(rtdb, `${FACES_REF}/${userId}`);\r\n    await remove(faceRef);\r\n    \r\n    console.log(`Face descriptor for ${userId} removed from Firebase`);\r\n    return true;\r\n  } catch (error) {\r\n    console.error(\"Error removing face from Firebase:\", error);\r\n    return false;\r\n  }\r\n};\r\n\r\n/**\r\n * Check if user has face data in Firebase\r\n * @param {string} userId - User ID\r\n * @returns {Promise<boolean>} Whether face data exists\r\n */\r\nexport const hasFaceInFirebase = async (userId) => {\r\n  try {\r\n    if (!userId) return false;\r\n    \r\n    const faceRef = ref(rtdb, `${FACES_REF}/${userId}`);\r\n    const snapshot = await get(faceRef);\r\n    \r\n    return snapshot.exists();\r\n  } catch (error) {\r\n    console.error(\"Error checking face in Firebase:\", error);\r\n    return false;\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}