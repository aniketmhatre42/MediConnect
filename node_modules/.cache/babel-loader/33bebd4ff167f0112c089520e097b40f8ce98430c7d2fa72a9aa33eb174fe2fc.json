{"ast":null,"code":"import { ref, set, get } from \"firebase/database\";\nimport { rtdb } from \"../firebase/config\";\n\n/**\r\n * Direct test to validate Firebase Realtime Database connection\r\n * Without using any listeners that could cause TDZ errors\r\n */\nexport const testDatabaseConnection = async () => {\n  console.group(\"üîç Firebase Connection Test\");\n  console.log(\"Starting Firebase connection test...\");\n\n  // Step 1: Verify rtdb is initialized\n  if (!rtdb) {\n    console.error(\"‚ùå Firebase Realtime Database is not initialized!\");\n    console.groupEnd();\n    return {\n      success: false,\n      error: \"Database not initialized\"\n    };\n  }\n  console.log(\"‚úì Database reference exists\");\n\n  // REMOVED: Connection status check that used listeners and unsubscribe\n  // Instead use a simple write and read test\n\n  try {\n    const testData = {\n      timestamp: new Date().toISOString(),\n      message: \"Firebase connection test\",\n      random: Math.random()\n    };\n    const testPath = \"debug/connection_test\";\n    console.log(`Writing test data to ${testPath}...`);\n\n    // Write data\n    await set(ref(rtdb, testPath), testData);\n    console.log(\"‚úÖ Test write successful!\");\n\n    // Read data back\n    console.log(\"Reading test data...\");\n    const snapshot = await get(ref(rtdb, testPath));\n    if (!snapshot.exists()) {\n      console.error(\"‚ùå Test data not found after writing!\");\n      console.groupEnd();\n      return {\n        success: false,\n        error: \"Data not found after writing\"\n      };\n    }\n    const readData = snapshot.val();\n    console.log(\"‚úÖ Read successful:\", readData);\n\n    // Validate that what we wrote matches what we read\n    const isValid = readData.timestamp === testData.timestamp && readData.random === testData.random;\n    if (!isValid) {\n      console.error(\"‚ùå Read data doesn't match written data!\");\n      console.groupEnd();\n      return {\n        success: false,\n        error: \"Data mismatch\"\n      };\n    }\n    console.log(\"üéâ Firebase connection test passed successfully!\");\n    console.groupEnd();\n    return {\n      success: true,\n      data: readData\n    };\n  } catch (error) {\n    console.error(\"‚ùå Firebase test failed:\", error);\n    console.groupEnd();\n    return {\n      success: false,\n      error: error.message,\n      code: error.code,\n      stack: error.stack\n    };\n  }\n};\n\n// Make function available in global window for console debugging\nif (typeof window !== 'undefined') {\n  window.testFirebaseConnection = testDatabaseConnection;\n  console.log(\"üîç Firebase test utility loaded! Run window.testFirebaseConnection() in console\");\n}\nexport default testDatabaseConnection;","map":{"version":3,"names":["ref","set","get","rtdb","testDatabaseConnection","console","group","log","error","groupEnd","success","testData","timestamp","Date","toISOString","message","random","Math","testPath","snapshot","exists","readData","val","isValid","data","code","stack","window","testFirebaseConnection"],"sources":["D:/Movies/Aniket/test2/test/src/services/testFirebaseConnection.js"],"sourcesContent":["import { ref, set, get } from \"firebase/database\";\r\nimport { rtdb } from \"../firebase/config\";\r\n\r\n/**\r\n * Direct test to validate Firebase Realtime Database connection\r\n * Without using any listeners that could cause TDZ errors\r\n */\r\nexport const testDatabaseConnection = async () => {\r\n  console.group(\"üîç Firebase Connection Test\");\r\n  console.log(\"Starting Firebase connection test...\");\r\n  \r\n  // Step 1: Verify rtdb is initialized\r\n  if (!rtdb) {\r\n    console.error(\"‚ùå Firebase Realtime Database is not initialized!\");\r\n    console.groupEnd();\r\n    return { success: false, error: \"Database not initialized\" };\r\n  }\r\n  \r\n  console.log(\"‚úì Database reference exists\");\r\n  \r\n  // REMOVED: Connection status check that used listeners and unsubscribe\r\n  // Instead use a simple write and read test\r\n  \r\n  try {\r\n    const testData = {\r\n      timestamp: new Date().toISOString(),\r\n      message: \"Firebase connection test\",\r\n      random: Math.random()\r\n    };\r\n    \r\n    const testPath = \"debug/connection_test\";\r\n    console.log(`Writing test data to ${testPath}...`);\r\n    \r\n    // Write data\r\n    await set(ref(rtdb, testPath), testData);\r\n    console.log(\"‚úÖ Test write successful!\");\r\n    \r\n    // Read data back\r\n    console.log(\"Reading test data...\");\r\n    const snapshot = await get(ref(rtdb, testPath));\r\n    \r\n    if (!snapshot.exists()) {\r\n      console.error(\"‚ùå Test data not found after writing!\");\r\n      console.groupEnd();\r\n      return { success: false, error: \"Data not found after writing\" };\r\n    }\r\n    \r\n    const readData = snapshot.val();\r\n    console.log(\"‚úÖ Read successful:\", readData);\r\n    \r\n    // Validate that what we wrote matches what we read\r\n    const isValid = readData.timestamp === testData.timestamp && \r\n                    readData.random === testData.random;\r\n    \r\n    if (!isValid) {\r\n      console.error(\"‚ùå Read data doesn't match written data!\");\r\n      console.groupEnd();\r\n      return { success: false, error: \"Data mismatch\" };\r\n    }\r\n    \r\n    console.log(\"üéâ Firebase connection test passed successfully!\");\r\n    console.groupEnd();\r\n    return { success: true, data: readData };\r\n    \r\n  } catch (error) {\r\n    console.error(\"‚ùå Firebase test failed:\", error);\r\n    console.groupEnd();\r\n    return { \r\n      success: false, \r\n      error: error.message,\r\n      code: error.code,\r\n      stack: error.stack\r\n    };\r\n  }\r\n};\r\n\r\n// Make function available in global window for console debugging\r\nif (typeof window !== 'undefined') {\r\n  window.testFirebaseConnection = testDatabaseConnection;\r\n  console.log(\"üîç Firebase test utility loaded! Run window.testFirebaseConnection() in console\");\r\n}\r\n\r\nexport default testDatabaseConnection;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}