{"ast":null,"code":"import { ref, set, get, serverTimestamp } from \"firebase/database\";\nimport { rtdb } from \"../firebase/config\";\n\n// This function tests the Firebase connection without using any listeners\n// that could cause Temporal Dead Zone errors\nconst testDatabaseConnection = async () => {\n  try {\n    console.log(\"Testing Firebase Realtime Database connection...\");\n\n    // Create a unique test path to avoid conflicts\n    const testId = `test_${Date.now()}`;\n    const testPath = `debug/connection_tests/${testId}`;\n    const testRef = ref(rtdb, testPath);\n\n    // Write test data\n    await set(testRef, {\n      timestamp: serverTimestamp(),\n      client: navigator.userAgent,\n      status: \"success\",\n      connected: true\n    });\n\n    // Read back the data to confirm\n    const snapshot = await get(testRef);\n    if (snapshot.exists()) {\n      return {\n        success: true,\n        message: \"Firebase connection successful\",\n        path: testPath\n      };\n    } else {\n      return {\n        success: false,\n        message: \"Data written but could not be read back\"\n      };\n    }\n  } catch (error) {\n    console.error(\"Firebase connection test failed:\", error);\n    return {\n      success: false,\n      message: `Connection error: ${error.message}`,\n      error: error.toString()\n    };\n  }\n};\n\n// Export the tester function\nexport default testDatabaseConnection;","map":{"version":3,"names":["ref","set","get","serverTimestamp","rtdb","testDatabaseConnection","console","log","testId","Date","now","testPath","testRef","timestamp","client","navigator","userAgent","status","connected","snapshot","exists","success","message","path","error","toString"],"sources":["D:/Movies/Aniket/test2/test/src/services/testFirebaseConnection.js"],"sourcesContent":["import { ref, set, get, serverTimestamp } from \"firebase/database\";\r\nimport { rtdb } from \"../firebase/config\";\r\n\r\n// This function tests the Firebase connection without using any listeners\r\n// that could cause Temporal Dead Zone errors\r\nconst testDatabaseConnection = async () => {\r\n  try {\r\n    console.log(\"Testing Firebase Realtime Database connection...\");\r\n    \r\n    // Create a unique test path to avoid conflicts\r\n    const testId = `test_${Date.now()}`;\r\n    const testPath = `debug/connection_tests/${testId}`;\r\n    const testRef = ref(rtdb, testPath);\r\n    \r\n    // Write test data\r\n    await set(testRef, {\r\n      timestamp: serverTimestamp(),\r\n      client: navigator.userAgent,\r\n      status: \"success\",\r\n      connected: true\r\n    });\r\n    \r\n    // Read back the data to confirm\r\n    const snapshot = await get(testRef);\r\n    \r\n    if (snapshot.exists()) {\r\n      return {\r\n        success: true,\r\n        message: \"Firebase connection successful\",\r\n        path: testPath\r\n      };\r\n    } else {\r\n      return {\r\n        success: false,\r\n        message: \"Data written but could not be read back\"\r\n      };\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Firebase connection test failed:\", error);\r\n    \r\n    return {\r\n      success: false,\r\n      message: `Connection error: ${error.message}`,\r\n      error: error.toString()\r\n    };\r\n  }\r\n};\r\n\r\n// Export the tester function\r\nexport default testDatabaseConnection;\r\n"],"mappings":"AAAA,SAASA,GAAG,EAAEC,GAAG,EAAEC,GAAG,EAAEC,eAAe,QAAQ,mBAAmB;AAClE,SAASC,IAAI,QAAQ,oBAAoB;;AAEzC;AACA;AACA,MAAMC,sBAAsB,GAAG,MAAAA,CAAA,KAAY;EACzC,IAAI;IACFC,OAAO,CAACC,GAAG,CAAC,kDAAkD,CAAC;;IAE/D;IACA,MAAMC,MAAM,GAAG,QAAQC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE;IACnC,MAAMC,QAAQ,GAAG,0BAA0BH,MAAM,EAAE;IACnD,MAAMI,OAAO,GAAGZ,GAAG,CAACI,IAAI,EAAEO,QAAQ,CAAC;;IAEnC;IACA,MAAMV,GAAG,CAACW,OAAO,EAAE;MACjBC,SAAS,EAAEV,eAAe,CAAC,CAAC;MAC5BW,MAAM,EAAEC,SAAS,CAACC,SAAS;MAC3BC,MAAM,EAAE,SAAS;MACjBC,SAAS,EAAE;IACb,CAAC,CAAC;;IAEF;IACA,MAAMC,QAAQ,GAAG,MAAMjB,GAAG,CAACU,OAAO,CAAC;IAEnC,IAAIO,QAAQ,CAACC,MAAM,CAAC,CAAC,EAAE;MACrB,OAAO;QACLC,OAAO,EAAE,IAAI;QACbC,OAAO,EAAE,gCAAgC;QACzCC,IAAI,EAAEZ;MACR,CAAC;IACH,CAAC,MAAM;MACL,OAAO;QACLU,OAAO,EAAE,KAAK;QACdC,OAAO,EAAE;MACX,CAAC;IACH;EACF,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdlB,OAAO,CAACkB,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;IAExD,OAAO;MACLH,OAAO,EAAE,KAAK;MACdC,OAAO,EAAE,qBAAqBE,KAAK,CAACF,OAAO,EAAE;MAC7CE,KAAK,EAAEA,KAAK,CAACC,QAAQ,CAAC;IACxB,CAAC;EACH;AACF,CAAC;;AAED;AACA,eAAepB,sBAAsB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}