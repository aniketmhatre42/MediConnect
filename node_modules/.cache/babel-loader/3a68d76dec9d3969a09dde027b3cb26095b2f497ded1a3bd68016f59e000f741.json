{"ast":null,"code":"var _jsxFileName = \"D:\\\\Movies\\\\Aniket\\\\test2\\\\test\\\\src\\\\Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport \"./Chatbot.css\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Chatbot() {\n  _s();\n  const [input, setInput] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n  const [isTyping, setIsTyping] = useState(false);\n  const messagesEndRef = useRef(null);\n  const navigate = useNavigate();\n\n  // Authentication check and welcome message\n  useEffect(() => {\n    const authenticated = sessionStorage.getItem(\"authenticated\") === \"true\";\n    const username = sessionStorage.getItem(\"username\");\n    const isNewLogin = sessionStorage.getItem(\"isNewLogin\") === \"true\";\n    if (!authenticated || !username) {\n      console.log(\"User not authenticated, redirecting to login\");\n      // Store the intended destination to redirect back after login\n      navigate(\"/login\", {\n        state: {\n          redirectAfterLogin: \"/chatbot\"\n        }\n      });\n      return;\n    }\n\n    // Remove isNewLogin flag\n    sessionStorage.removeItem(\"isNewLogin\");\n\n    // Display welcome message when component mounts and messages are empty\n    if (messages.length === 0) {\n      // Create personalized welcome message with username\n      const welcomeMessage = {\n        text: `Hello ${username}! I'm your MediConnect AI assistant. How can I help you today?`,\n        sender: \"bot\"\n      };\n\n      // Simulate typing effect for welcome message\n      setIsTyping(true);\n      setTimeout(() => {\n        setMessages([welcomeMessage]);\n        setIsTyping(false);\n      }, 1000);\n    }\n  }, [navigate, messages.length]);\n\n  // Scroll to bottom whenever messages change\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  }, [messages]);\n\n  // Handle sending messages\n  const handleSend = async () => {\n    if (input.trim() === \"\") return;\n\n    // Add user message\n    const userMessage = {\n      text: input,\n      sender: \"user\"\n    };\n    setMessages(prevMessages => [...prevMessages, userMessage]);\n    setInput(\"\");\n    setIsTyping(true);\n    try {\n      // You would replace this with your actual API call to get chatbot responses\n      // const response = await axios.post('/api/chatbot', { message: input });\n\n      // For now, simulate a response with a timeout\n      setTimeout(() => {\n        // Replace this with actual API response handling\n        const botReply = {\n          text: `I received your message: \"${input}\". How can I assist further?`,\n          sender: \"bot\"\n        };\n        setMessages(prevMessages => [...prevMessages, botReply]);\n        setIsTyping(false);\n      }, 1000);\n    } catch (error) {\n      console.error(\"Error getting response from chatbot:\", error);\n      const errorMessage = {\n        text: \"Sorry, I'm having trouble connecting. Please try again later.\",\n        sender: \"bot\"\n      };\n      setMessages(prevMessages => [...prevMessages, errorMessage]);\n      setIsTyping(false);\n    }\n  };\n\n  // Handle Enter key press\n  const handleKeyPress = e => {\n    if (e.key === 'Enter') {\n      handleSend();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-header\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"MediConnect Health Assistant\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-messages\",\n      children: [messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${message.sender}`,\n        children: message.text\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }, this)), isTyping && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message bot typing\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"typing-indicator\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        onKeyPress: handleKeyPress,\n        placeholder: \"Type your message...\",\n        disabled: isTyping\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSend,\n        disabled: isTyping || input.trim() === \"\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n}\n_s(Chatbot, \"CZ1SAqbzowVkSVDvlJ9UKwQyi2E=\", false, function () {\n  return [useNavigate];\n});\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useNavigate","axios","jsxDEV","_jsxDEV","Chatbot","_s","input","setInput","messages","setMessages","isTyping","setIsTyping","messagesEndRef","navigate","authenticated","sessionStorage","getItem","username","isNewLogin","console","log","state","redirectAfterLogin","removeItem","length","welcomeMessage","text","sender","setTimeout","_messagesEndRef$curre","current","scrollIntoView","behavior","handleSend","trim","userMessage","prevMessages","botReply","error","errorMessage","handleKeyPress","e","key","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","message","index","ref","type","value","onChange","target","onKeyPress","placeholder","disabled","onClick","_c","$RefreshReg$"],"sources":["D:/Movies/Aniket/test2/test/src/Chatbot.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport \"./Chatbot.css\";\r\nimport axios from \"axios\";\r\n\r\nfunction Chatbot() {\r\n  const [input, setInput] = useState(\"\");\r\n  const [messages, setMessages] = useState([]);\r\n  const [isTyping, setIsTyping] = useState(false);\r\n  const messagesEndRef = useRef(null);\r\n  const navigate = useNavigate();\r\n\r\n  // Authentication check and welcome message\r\n  useEffect(() => {\r\n    const authenticated = sessionStorage.getItem(\"authenticated\") === \"true\";\r\n    const username = sessionStorage.getItem(\"username\");\r\n    const isNewLogin = sessionStorage.getItem(\"isNewLogin\") === \"true\";\r\n    \r\n    if (!authenticated || !username) {\r\n      console.log(\"User not authenticated, redirecting to login\");\r\n      // Store the intended destination to redirect back after login\r\n      navigate(\"/login\", { \r\n        state: { redirectAfterLogin: \"/chatbot\" } \r\n      });\r\n      return;\r\n    }\r\n\r\n    // Remove isNewLogin flag\r\n    sessionStorage.removeItem(\"isNewLogin\");\r\n    \r\n    // Display welcome message when component mounts and messages are empty\r\n    if (messages.length === 0) {\r\n      // Create personalized welcome message with username\r\n      const welcomeMessage = {\r\n        text: `Hello ${username}! I'm your MediConnect AI assistant. How can I help you today?`,\r\n        sender: \"bot\"\r\n      };\r\n      \r\n      // Simulate typing effect for welcome message\r\n      setIsTyping(true);\r\n      setTimeout(() => {\r\n        setMessages([welcomeMessage]);\r\n        setIsTyping(false);\r\n      }, 1000);\r\n    }\r\n  }, [navigate, messages.length]);\r\n\r\n  // Scroll to bottom whenever messages change\r\n  useEffect(() => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n  }, [messages]);\r\n\r\n  // Handle sending messages\r\n  const handleSend = async () => {\r\n    if (input.trim() === \"\") return;\r\n\r\n    // Add user message\r\n    const userMessage = { text: input, sender: \"user\" };\r\n    setMessages(prevMessages => [...prevMessages, userMessage]);\r\n    setInput(\"\");\r\n    setIsTyping(true);\r\n\r\n    try {\r\n      // You would replace this with your actual API call to get chatbot responses\r\n      // const response = await axios.post('/api/chatbot', { message: input });\r\n      \r\n      // For now, simulate a response with a timeout\r\n      setTimeout(() => {\r\n        // Replace this with actual API response handling\r\n        const botReply = { \r\n          text: `I received your message: \"${input}\". How can I assist further?`, \r\n          sender: \"bot\" \r\n        };\r\n        setMessages(prevMessages => [...prevMessages, botReply]);\r\n        setIsTyping(false);\r\n      }, 1000);\r\n    } catch (error) {\r\n      console.error(\"Error getting response from chatbot:\", error);\r\n      const errorMessage = { \r\n        text: \"Sorry, I'm having trouble connecting. Please try again later.\", \r\n        sender: \"bot\" \r\n      };\r\n      setMessages(prevMessages => [...prevMessages, errorMessage]);\r\n      setIsTyping(false);\r\n    }\r\n  };\r\n\r\n  // Handle Enter key press\r\n  const handleKeyPress = (e) => {\r\n    if (e.key === 'Enter') {\r\n      handleSend();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"chatbot-container\">\r\n      <div className=\"chatbot-header\">\r\n        <h2>MediConnect Health Assistant</h2>\r\n      </div>\r\n      <div className=\"chatbot-messages\">\r\n        {messages.map((message, index) => (\r\n          <div key={index} className={`message ${message.sender}`}>\r\n            {message.text}\r\n          </div>\r\n        ))}\r\n        {isTyping && (\r\n          <div className=\"message bot typing\">\r\n            <div className=\"typing-indicator\">\r\n              <span></span>\r\n              <span></span>\r\n              <span></span>\r\n            </div>\r\n          </div>\r\n        )}\r\n        <div ref={messagesEndRef} />\r\n      </div>\r\n      <div className=\"chatbot-input\">\r\n        <input\r\n          type=\"text\"\r\n          value={input}\r\n          onChange={(e) => setInput(e.target.value)}\r\n          onKeyPress={handleKeyPress}\r\n          placeholder=\"Type your message...\"\r\n          disabled={isTyping}\r\n        />\r\n        <button onClick={handleSend} disabled={isTyping || input.trim() === \"\"}>\r\n          Send\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chatbot;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}