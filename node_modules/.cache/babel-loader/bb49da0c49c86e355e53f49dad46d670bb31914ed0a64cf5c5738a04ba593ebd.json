{"ast":null,"code":"/**\r\n * Utility functions for authentication\r\n */\n\n/**\r\n * Check if user is logged in by examining session and local storage\r\n * @returns {Object|null} User object if logged in, null if not\r\n */\nexport const getLoggedInUser = () => {\n  // Check session storage first (for session-based auth)\n  const userId = sessionStorage.getItem('userId');\n  const userRole = sessionStorage.getItem('userRole');\n  const username = sessionStorage.getItem('username');\n\n  // If we have userId in session, consider the user logged in\n  if (userId) {\n    return {\n      id: userId,\n      role: userRole || 'user',\n      username: username || sessionStorage.getItem('userEmail') || 'User'\n    };\n  }\n\n  // Check local storage as fallback (for persistent auth)\n  try {\n    const localUser = localStorage.getItem('user');\n    if (localUser) {\n      const userData = JSON.parse(localUser);\n      return {\n        id: userData.id || userData.userId,\n        username: userData.username || userData.email || 'User',\n        role: userData.role || 'user'\n      };\n    }\n  } catch (error) {\n    console.error(\"Error parsing user data from localStorage:\", error);\n  }\n  return null;\n};\n\n/**\r\n * Check if user is authenticated\r\n * @returns {boolean} True if user is logged in\r\n */\nexport const isAuthenticated = () => {\n  return getLoggedInUser() !== null;\n};\n\n/**\r\n * Log out the current user by clearing session and local storage\r\n */\nexport const logoutUser = () => {\n  // Clear session storage\n  sessionStorage.removeItem('userId');\n  sessionStorage.removeItem('userRole');\n  sessionStorage.removeItem('username');\n  sessionStorage.removeItem('userEmail');\n  sessionStorage.removeItem('workerName');\n  sessionStorage.removeItem('workerDistrict');\n  sessionStorage.removeItem('authenticated');\n\n  // Clear relevant localStorage items\n  localStorage.removeItem('user');\n\n  // Add any additional cleanup needed\n\n  // Return true to indicate successful logout\n  return true;\n};","map":{"version":3,"names":["getLoggedInUser","userId","sessionStorage","getItem","userRole","username","id","role","localUser","localStorage","userData","JSON","parse","email","error","console","isAuthenticated","logoutUser","removeItem"],"sources":["D:/Movies/Aniket/test2/test/src/utils/authUtils.js"],"sourcesContent":["/**\r\n * Utility functions for authentication\r\n */\r\n\r\n/**\r\n * Check if user is logged in by examining session and local storage\r\n * @returns {Object|null} User object if logged in, null if not\r\n */\r\nexport const getLoggedInUser = () => {\r\n  // Check session storage first (for session-based auth)\r\n  const userId = sessionStorage.getItem('userId');\r\n  const userRole = sessionStorage.getItem('userRole');\r\n  const username = sessionStorage.getItem('username');\r\n\r\n  // If we have userId in session, consider the user logged in\r\n  if (userId) {\r\n    return {\r\n      id: userId,\r\n      role: userRole || 'user',\r\n      username: username || sessionStorage.getItem('userEmail') || 'User'\r\n    };\r\n  }\r\n\r\n  // Check local storage as fallback (for persistent auth)\r\n  try {\r\n    const localUser = localStorage.getItem('user');\r\n    if (localUser) {\r\n      const userData = JSON.parse(localUser);\r\n      return {\r\n        id: userData.id || userData.userId,\r\n        username: userData.username || userData.email || 'User',\r\n        role: userData.role || 'user'\r\n      };\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error parsing user data from localStorage:\", error);\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\n/**\r\n * Check if user is authenticated\r\n * @returns {boolean} True if user is logged in\r\n */\r\nexport const isAuthenticated = () => {\r\n  return getLoggedInUser() !== null;\r\n};\r\n\r\n/**\r\n * Log out the current user by clearing session and local storage\r\n */\r\nexport const logoutUser = () => {\r\n  // Clear session storage\r\n  sessionStorage.removeItem('userId');\r\n  sessionStorage.removeItem('userRole');\r\n  sessionStorage.removeItem('username');\r\n  sessionStorage.removeItem('userEmail');\r\n  sessionStorage.removeItem('workerName');\r\n  sessionStorage.removeItem('workerDistrict');\r\n  sessionStorage.removeItem('authenticated');\r\n\r\n  // Clear relevant localStorage items\r\n  localStorage.removeItem('user');\r\n  \r\n  // Add any additional cleanup needed\r\n  \r\n  // Return true to indicate successful logout\r\n  return true;\r\n};\r\n"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO,MAAMA,eAAe,GAAGA,CAAA,KAAM;EACnC;EACA,MAAMC,MAAM,GAAGC,cAAc,CAACC,OAAO,CAAC,QAAQ,CAAC;EAC/C,MAAMC,QAAQ,GAAGF,cAAc,CAACC,OAAO,CAAC,UAAU,CAAC;EACnD,MAAME,QAAQ,GAAGH,cAAc,CAACC,OAAO,CAAC,UAAU,CAAC;;EAEnD;EACA,IAAIF,MAAM,EAAE;IACV,OAAO;MACLK,EAAE,EAAEL,MAAM;MACVM,IAAI,EAAEH,QAAQ,IAAI,MAAM;MACxBC,QAAQ,EAAEA,QAAQ,IAAIH,cAAc,CAACC,OAAO,CAAC,WAAW,CAAC,IAAI;IAC/D,CAAC;EACH;;EAEA;EACA,IAAI;IACF,MAAMK,SAAS,GAAGC,YAAY,CAACN,OAAO,CAAC,MAAM,CAAC;IAC9C,IAAIK,SAAS,EAAE;MACb,MAAME,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACJ,SAAS,CAAC;MACtC,OAAO;QACLF,EAAE,EAAEI,QAAQ,CAACJ,EAAE,IAAII,QAAQ,CAACT,MAAM;QAClCI,QAAQ,EAAEK,QAAQ,CAACL,QAAQ,IAAIK,QAAQ,CAACG,KAAK,IAAI,MAAM;QACvDN,IAAI,EAAEG,QAAQ,CAACH,IAAI,IAAI;MACzB,CAAC;IACH;EACF,CAAC,CAAC,OAAOO,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,4CAA4C,EAAEA,KAAK,CAAC;EACpE;EAEA,OAAO,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAME,eAAe,GAAGA,CAAA,KAAM;EACnC,OAAOhB,eAAe,CAAC,CAAC,KAAK,IAAI;AACnC,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMiB,UAAU,GAAGA,CAAA,KAAM;EAC9B;EACAf,cAAc,CAACgB,UAAU,CAAC,QAAQ,CAAC;EACnChB,cAAc,CAACgB,UAAU,CAAC,UAAU,CAAC;EACrChB,cAAc,CAACgB,UAAU,CAAC,UAAU,CAAC;EACrChB,cAAc,CAACgB,UAAU,CAAC,WAAW,CAAC;EACtChB,cAAc,CAACgB,UAAU,CAAC,YAAY,CAAC;EACvChB,cAAc,CAACgB,UAAU,CAAC,gBAAgB,CAAC;EAC3ChB,cAAc,CAACgB,UAAU,CAAC,eAAe,CAAC;;EAE1C;EACAT,YAAY,CAACS,UAAU,CAAC,MAAM,CAAC;;EAE/B;;EAEA;EACA,OAAO,IAAI;AACb,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}