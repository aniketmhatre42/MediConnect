{"ast":null,"code":"import { initializeApp } from \"firebase/app\";\nimport { getDatabase, connectDatabaseEmulator } from \"firebase/database\";\nimport { getAuth, connectAuthEmulator } from \"firebase/auth\";\nlet app = null;\nlet database = null;\nlet auth = null;\n\n/**\r\n * Safely initializes Firebase with better error handling\r\n * @param {Object} config - Firebase config object\r\n * @returns {Object} Firebase instances\r\n */\nexport const initializeFirebase = config => {\n  console.log(\"🔄 Initializing Firebase...\");\n  try {\n    // Validate config has required fields\n    if (!config || !config.apiKey || !config.projectId || !config.databaseURL) {\n      console.error(\"❌ Invalid Firebase config:\", {\n        hasConfig: !!config,\n        hasApiKey: !!(config !== null && config !== void 0 && config.apiKey),\n        hasProjectId: !!(config !== null && config !== void 0 && config.projectId),\n        hasDatabaseURL: !!(config !== null && config !== void 0 && config.databaseURL)\n      });\n      throw new Error(\"Invalid Firebase configuration\");\n    }\n    console.log(\"Firebase config validated:\", {\n      projectId: config.projectId,\n      databaseURL: config.databaseURL\n    });\n\n    // Initialize app if not already done\n    if (!app) {\n      app = initializeApp(config);\n      console.log(\"✅ Firebase app initialized\");\n    }\n\n    // Initialize Realtime Database\n    if (!database) {\n      database = getDatabase(app);\n      console.log(\"✅ Firebase Realtime Database initialized\");\n      console.log(`Database URL: ${config.databaseURL}`);\n\n      // Check if we're in local development mode\n      if (window.location.hostname === \"localhost\") {\n        try {\n          // Optionally connect to emulator\n          // connectDatabaseEmulator(database, \"localhost\", 9000);\n          // console.log(\"✅ Connected to Firebase Database emulator\");\n        } catch (emulatorErr) {\n          console.warn(\"⚠️ Emulator connection failed:\", emulatorErr.message);\n        }\n      }\n    }\n\n    // Initialize Auth\n    if (!auth) {\n      auth = getAuth(app);\n      console.log(\"✅ Firebase Auth initialized\");\n\n      // Check if we're in local development mode\n      if (window.location.hostname === \"localhost\") {\n        try {\n          // Optionally connect to emulator\n          // connectAuthEmulator(auth, \"http://localhost:9099\");\n          // console.log(\"✅ Connected to Firebase Auth emulator\");\n        } catch (emulatorErr) {\n          console.warn(\"⚠️ Auth emulator connection failed:\", emulatorErr.message);\n        }\n      }\n    }\n    console.log(\"🚀 Firebase initialization complete\");\n    return {\n      app,\n      database,\n      auth\n    };\n  } catch (error) {\n    console.error(\"❌ Firebase initialization failed:\", error);\n    throw error;\n  }\n};\n\n/**\r\n * Checks if Firebase is properly initialized\r\n */\nexport const checkFirebaseStatus = () => {\n  return {\n    appInitialized: !!app,\n    databaseInitialized: !!database,\n    authInitialized: !!auth\n  };\n};","map":{"version":3,"names":["initializeApp","getDatabase","connectDatabaseEmulator","getAuth","connectAuthEmulator","app","database","auth","initializeFirebase","config","console","log","apiKey","projectId","databaseURL","error","hasConfig","hasApiKey","hasProjectId","hasDatabaseURL","Error","window","location","hostname","emulatorErr","warn","message","checkFirebaseStatus","appInitialized","databaseInitialized","authInitialized"],"sources":["D:/Movies/Aniket/test2/test/src/firebase/initFirebase.js"],"sourcesContent":["import { initializeApp } from \"firebase/app\";\r\nimport { getDatabase, connectDatabaseEmulator } from \"firebase/database\";\r\nimport { getAuth, connectAuthEmulator } from \"firebase/auth\";\r\n\r\nlet app = null;\r\nlet database = null;\r\nlet auth = null;\r\n\r\n/**\r\n * Safely initializes Firebase with better error handling\r\n * @param {Object} config - Firebase config object\r\n * @returns {Object} Firebase instances\r\n */\r\nexport const initializeFirebase = (config) => {\r\n  console.log(\"🔄 Initializing Firebase...\");\r\n  \r\n  try {\r\n    // Validate config has required fields\r\n    if (!config || !config.apiKey || !config.projectId || !config.databaseURL) {\r\n      console.error(\"❌ Invalid Firebase config:\", {\r\n        hasConfig: !!config,\r\n        hasApiKey: !!config?.apiKey,\r\n        hasProjectId: !!config?.projectId,\r\n        hasDatabaseURL: !!config?.databaseURL\r\n      });\r\n      throw new Error(\"Invalid Firebase configuration\");\r\n    }\r\n    \r\n    console.log(\"Firebase config validated:\", {\r\n      projectId: config.projectId,\r\n      databaseURL: config.databaseURL\r\n    });\r\n    \r\n    // Initialize app if not already done\r\n    if (!app) {\r\n      app = initializeApp(config);\r\n      console.log(\"✅ Firebase app initialized\");\r\n    }\r\n    \r\n    // Initialize Realtime Database\r\n    if (!database) {\r\n      database = getDatabase(app);\r\n      console.log(\"✅ Firebase Realtime Database initialized\");\r\n      console.log(`Database URL: ${config.databaseURL}`);\r\n      \r\n      // Check if we're in local development mode\r\n      if (window.location.hostname === \"localhost\") {\r\n        try {\r\n          // Optionally connect to emulator\r\n          // connectDatabaseEmulator(database, \"localhost\", 9000);\r\n          // console.log(\"✅ Connected to Firebase Database emulator\");\r\n        } catch (emulatorErr) {\r\n          console.warn(\"⚠️ Emulator connection failed:\", emulatorErr.message);\r\n        }\r\n      }\r\n    }\r\n    \r\n    // Initialize Auth\r\n    if (!auth) {\r\n      auth = getAuth(app);\r\n      console.log(\"✅ Firebase Auth initialized\");\r\n      \r\n      // Check if we're in local development mode\r\n      if (window.location.hostname === \"localhost\") {\r\n        try {\r\n          // Optionally connect to emulator\r\n          // connectAuthEmulator(auth, \"http://localhost:9099\");\r\n          // console.log(\"✅ Connected to Firebase Auth emulator\");\r\n        } catch (emulatorErr) {\r\n          console.warn(\"⚠️ Auth emulator connection failed:\", emulatorErr.message);\r\n        }\r\n      }\r\n    }\r\n    \r\n    console.log(\"🚀 Firebase initialization complete\");\r\n    \r\n    return { app, database, auth };\r\n  } catch (error) {\r\n    console.error(\"❌ Firebase initialization failed:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Checks if Firebase is properly initialized\r\n */\r\nexport const checkFirebaseStatus = () => {\r\n  return {\r\n    appInitialized: !!app,\r\n    databaseInitialized: !!database,\r\n    authInitialized: !!auth\r\n  };\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}