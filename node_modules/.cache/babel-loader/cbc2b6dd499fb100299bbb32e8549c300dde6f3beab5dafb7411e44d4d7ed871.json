{"ast":null,"code":"import { storage, db } from './config';\nimport { ref, uploadBytes, getDownloadURL } from 'firebase/storage';\nimport { doc, setDoc, getDoc } from 'firebase/firestore';\nexport const uploadFaceDescriptor = async (userId, faceDescriptor) => {\n  try {\n    await setDoc(doc(db, 'faceDescriptors', userId), {\n      descriptor: Array.from(faceDescriptor),\n      timestamp: new Date().toISOString()\n    });\n    return true;\n  } catch (error) {\n    console.error('Error uploading face descriptor:', error);\n    return false;\n  }\n};\nexport const getFaceDescriptor = async userId => {\n  try {\n    const docRef = doc(db, 'faceDescriptors', userId);\n    const docSnap = await getDoc(docRef);\n    if (docSnap.exists()) {\n      const data = docSnap.data();\n      return new Float32Array(data.descriptor);\n    }\n    return null;\n  } catch (error) {\n    console.error('Error getting face descriptor:', error);\n    return null;\n  }\n};\nexport const uploadFaceImage = async (userId, imageBlob) => {\n  try {\n    const storageRef = ref(storage, `faceImages/${userId}`);\n    await uploadBytes(storageRef, imageBlob);\n    const imageUrl = await getDownloadURL(storageRef);\n    return imageUrl;\n  } catch (error) {\n    console.error('Error uploading face image:', error);\n    return null;\n  }\n};","map":{"version":3,"names":["storage","db","ref","uploadBytes","getDownloadURL","doc","setDoc","getDoc","uploadFaceDescriptor","userId","faceDescriptor","descriptor","Array","from","timestamp","Date","toISOString","error","console","getFaceDescriptor","docRef","docSnap","exists","data","Float32Array","uploadFaceImage","imageBlob","storageRef","imageUrl"],"sources":["D:/Movies/Aniket/test2/test/src/firebase/faceAuthService.js"],"sourcesContent":["import { storage, db } from './config';\r\nimport { ref, uploadBytes, getDownloadURL } from 'firebase/storage';\r\nimport { doc, setDoc, getDoc } from 'firebase/firestore';\r\n\r\nexport const uploadFaceDescriptor = async (userId, faceDescriptor) => {\r\n  try {\r\n    await setDoc(doc(db, 'faceDescriptors', userId), {\r\n      descriptor: Array.from(faceDescriptor),\r\n      timestamp: new Date().toISOString()\r\n    });\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error uploading face descriptor:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\nexport const getFaceDescriptor = async (userId) => {\r\n  try {\r\n    const docRef = doc(db, 'faceDescriptors', userId);\r\n    const docSnap = await getDoc(docRef);\r\n    \r\n    if (docSnap.exists()) {\r\n      const data = docSnap.data();\r\n      return new Float32Array(data.descriptor);\r\n    }\r\n    return null;\r\n  } catch (error) {\r\n    console.error('Error getting face descriptor:', error);\r\n    return null;\r\n  }\r\n};\r\n\r\nexport const uploadFaceImage = async (userId, imageBlob) => {\r\n  try {\r\n    const storageRef = ref(storage, `faceImages/${userId}`);\r\n    await uploadBytes(storageRef, imageBlob);\r\n    const imageUrl = await getDownloadURL(storageRef);\r\n    return imageUrl;\r\n  } catch (error) {\r\n    console.error('Error uploading face image:', error);\r\n    return null;\r\n  }\r\n};\r\n"],"mappings":"AAAA,SAASA,OAAO,EAAEC,EAAE,QAAQ,UAAU;AACtC,SAASC,GAAG,EAAEC,WAAW,EAAEC,cAAc,QAAQ,kBAAkB;AACnE,SAASC,GAAG,EAAEC,MAAM,EAAEC,MAAM,QAAQ,oBAAoB;AAExD,OAAO,MAAMC,oBAAoB,GAAG,MAAAA,CAAOC,MAAM,EAAEC,cAAc,KAAK;EACpE,IAAI;IACF,MAAMJ,MAAM,CAACD,GAAG,CAACJ,EAAE,EAAE,iBAAiB,EAAEQ,MAAM,CAAC,EAAE;MAC/CE,UAAU,EAAEC,KAAK,CAACC,IAAI,CAACH,cAAc,CAAC;MACtCI,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;IACpC,CAAC,CAAC;IACF,OAAO,IAAI;EACb,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;IACxD,OAAO,KAAK;EACd;AACF,CAAC;AAED,OAAO,MAAME,iBAAiB,GAAG,MAAOV,MAAM,IAAK;EACjD,IAAI;IACF,MAAMW,MAAM,GAAGf,GAAG,CAACJ,EAAE,EAAE,iBAAiB,EAAEQ,MAAM,CAAC;IACjD,MAAMY,OAAO,GAAG,MAAMd,MAAM,CAACa,MAAM,CAAC;IAEpC,IAAIC,OAAO,CAACC,MAAM,CAAC,CAAC,EAAE;MACpB,MAAMC,IAAI,GAAGF,OAAO,CAACE,IAAI,CAAC,CAAC;MAC3B,OAAO,IAAIC,YAAY,CAACD,IAAI,CAACZ,UAAU,CAAC;IAC1C;IACA,OAAO,IAAI;EACb,CAAC,CAAC,OAAOM,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;IACtD,OAAO,IAAI;EACb;AACF,CAAC;AAED,OAAO,MAAMQ,eAAe,GAAG,MAAAA,CAAOhB,MAAM,EAAEiB,SAAS,KAAK;EAC1D,IAAI;IACF,MAAMC,UAAU,GAAGzB,GAAG,CAACF,OAAO,EAAE,cAAcS,MAAM,EAAE,CAAC;IACvD,MAAMN,WAAW,CAACwB,UAAU,EAAED,SAAS,CAAC;IACxC,MAAME,QAAQ,GAAG,MAAMxB,cAAc,CAACuB,UAAU,CAAC;IACjD,OAAOC,QAAQ;EACjB,CAAC,CAAC,OAAOX,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACnD,OAAO,IAAI;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}