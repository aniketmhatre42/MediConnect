{"ast":null,"code":"/**\r\n * Service for handling face data storage\r\n */\n// Remove the import for file-saver\nimport { saveFaceDescriptor as saveLocalFaceDescriptor } from './localFaceStorage';\n\n// Base directory for face data files\nconst FACE_DATA_DIR = 'faceData';\n\n/**\r\n * Saves face descriptor data to localStorage and creates a downloadable file\r\n * \r\n * @param {string} userId - User ID\r\n * @param {string} username - Username for the file name\r\n * @param {Float32Array} descriptor - Face descriptor data\r\n * @returns {Promise<boolean>} Whether the save was successful\r\n */\nexport const saveFaceData = async (userId, username, descriptor) => {\n  try {\n    console.log(`Saving face data for user: ${username} (${userId})`);\n\n    // 1. Save to localStorage first for immediate use\n    const localSaved = await saveLocalFaceDescriptor(userId, descriptor);\n    if (!localSaved) {\n      console.error(\"Failed to save face data to localStorage\");\n    }\n\n    // 2. Convert descriptor to regular array for JSON\n    const descriptorArray = Array.from(descriptor);\n\n    // 3. Create data object with metadata\n    const faceData = {\n      userId,\n      username,\n      timestamp: new Date().toISOString(),\n      descriptor: descriptorArray\n    };\n\n    // 4. Create a Blob with the face data\n    const jsonBlob = new Blob([JSON.stringify(faceData, null, 2)], {\n      type: 'application/json'\n    });\n\n    // 5. Save file using native browser download instead of file-saver\n    createDownloadLink(jsonBlob, `${FACE_DATA_DIR}_${username}_${userId}.json`);\n    console.log(`Face data prepared for download: ${FACE_DATA_DIR}_${username}_${userId}.json`);\n    return true;\n  } catch (error) {\n    console.error(\"Error saving face data:\", error);\n    return false;\n  }\n};\n\n/**\r\n * Captures a face image from video and saves it as a downloadable file\r\n * \r\n * @param {string} userId - User ID\r\n * @param {string} username - Username for the file name\r\n * @param {HTMLVideoElement} videoElement - Video element with the face\r\n * @param {Object} detection - Face detection result from face-api.js\r\n * @returns {Promise<string|null>} URL of the saved image or null if failed\r\n */\nexport const captureFaceImage = async (userId, username, videoElement, detection) => {\n  try {\n    if (!videoElement || !detection) {\n      throw new Error(\"Missing required parameters\");\n    }\n\n    // Create canvas to capture the face\n    const canvas = document.createElement('canvas');\n    const context = canvas.getContext('2d');\n\n    // Set canvas size to video dimensions\n    canvas.width = videoElement.videoWidth;\n    canvas.height = videoElement.videoHeight;\n\n    // Draw the current video frame to the canvas\n    context.drawImage(videoElement, 0, 0, canvas.width, canvas.height);\n\n    // Draw a box around the detected face\n    if (detection.detection) {\n      const box = detection.detection.box;\n      context.strokeStyle = '#00ff00'; // Green box\n      context.lineWidth = 3;\n      context.strokeRect(box.x, box.y, box.width, box.height);\n\n      // Add user information text\n      context.fillStyle = 'rgba(0, 0, 0, 0.5)';\n      context.fillRect(box.x, box.y - 30, box.width, 30);\n      context.fillStyle = '#ffffff';\n      context.font = '16px Arial';\n      context.fillText(username, box.x + 5, box.y - 10);\n    }\n\n    // Convert canvas to blob\n    const imageBlob = await new Promise(resolve => {\n      canvas.toBlob(blob => resolve(blob), 'image/jpeg', 0.95);\n    });\n\n    // Create a URL for the blob (for preview or immediate use)\n    const imageUrl = URL.createObjectURL(imageBlob);\n\n    // Save the image file using native browser download\n    const filename = `${FACE_DATA_DIR}_photo_${username}_${userId}.jpg`;\n    createDownloadLink(imageBlob, filename);\n    console.log(`Face image prepared for download: ${filename}`);\n    return imageUrl;\n  } catch (error) {\n    console.error(\"Error capturing face image:\", error);\n    return null;\n  }\n};\n\n/**\r\n * Creates a download link and triggers download\r\n * @param {Blob} blob - The blob to download\r\n * @param {string} filename - Name for the downloaded file\r\n */\nfunction createDownloadLink(blob, filename) {\n  const downloadLink = document.createElement('a');\n  downloadLink.href = URL.createObjectURL(blob);\n  downloadLink.download = filename;\n  downloadLink.style.display = 'none';\n  document.body.appendChild(downloadLink);\n  downloadLink.click();\n\n  // Clean up after download starts\n  setTimeout(() => {\n    document.body.removeChild(downloadLink);\n    URL.revokeObjectURL(downloadLink.href);\n  }, 100);\n}","map":{"version":3,"names":["saveFaceDescriptor","saveLocalFaceDescriptor","FACE_DATA_DIR","saveFaceData","userId","username","descriptor","console","log","localSaved","error","descriptorArray","Array","from","faceData","timestamp","Date","toISOString","jsonBlob","Blob","JSON","stringify","type","createDownloadLink","captureFaceImage","videoElement","detection","Error","canvas","document","createElement","context","getContext","width","videoWidth","height","videoHeight","drawImage","box","strokeStyle","lineWidth","strokeRect","x","y","fillStyle","fillRect","font","fillText","imageBlob","Promise","resolve","toBlob","blob","imageUrl","URL","createObjectURL","filename","downloadLink","href","download","style","display","body","appendChild","click","setTimeout","removeChild","revokeObjectURL"],"sources":["D:/Movies/Aniket/test2/test/src/services/faceDataService.js"],"sourcesContent":["/**\r\n * Service for handling face data storage\r\n */\r\n// Remove the import for file-saver\r\nimport { saveFaceDescriptor as saveLocalFaceDescriptor } from './localFaceStorage';\r\n\r\n// Base directory for face data files\r\nconst FACE_DATA_DIR = 'faceData';\r\n\r\n/**\r\n * Saves face descriptor data to localStorage and creates a downloadable file\r\n * \r\n * @param {string} userId - User ID\r\n * @param {string} username - Username for the file name\r\n * @param {Float32Array} descriptor - Face descriptor data\r\n * @returns {Promise<boolean>} Whether the save was successful\r\n */\r\nexport const saveFaceData = async (userId, username, descriptor) => {\r\n  try {\r\n    console.log(`Saving face data for user: ${username} (${userId})`);\r\n    \r\n    // 1. Save to localStorage first for immediate use\r\n    const localSaved = await saveLocalFaceDescriptor(userId, descriptor);\r\n    if (!localSaved) {\r\n      console.error(\"Failed to save face data to localStorage\");\r\n    }\r\n    \r\n    // 2. Convert descriptor to regular array for JSON\r\n    const descriptorArray = Array.from(descriptor);\r\n    \r\n    // 3. Create data object with metadata\r\n    const faceData = {\r\n      userId,\r\n      username,\r\n      timestamp: new Date().toISOString(),\r\n      descriptor: descriptorArray\r\n    };\r\n    \r\n    // 4. Create a Blob with the face data\r\n    const jsonBlob = new Blob(\r\n      [JSON.stringify(faceData, null, 2)], \r\n      {type: 'application/json'}\r\n    );\r\n    \r\n    // 5. Save file using native browser download instead of file-saver\r\n    createDownloadLink(jsonBlob, `${FACE_DATA_DIR}_${username}_${userId}.json`);\r\n    \r\n    console.log(`Face data prepared for download: ${FACE_DATA_DIR}_${username}_${userId}.json`);\r\n    return true;\r\n  } catch (error) {\r\n    console.error(\"Error saving face data:\", error);\r\n    return false;\r\n  }\r\n};\r\n\r\n/**\r\n * Captures a face image from video and saves it as a downloadable file\r\n * \r\n * @param {string} userId - User ID\r\n * @param {string} username - Username for the file name\r\n * @param {HTMLVideoElement} videoElement - Video element with the face\r\n * @param {Object} detection - Face detection result from face-api.js\r\n * @returns {Promise<string|null>} URL of the saved image or null if failed\r\n */\r\nexport const captureFaceImage = async (userId, username, videoElement, detection) => {\r\n  try {\r\n    if (!videoElement || !detection) {\r\n      throw new Error(\"Missing required parameters\");\r\n    }\r\n    \r\n    // Create canvas to capture the face\r\n    const canvas = document.createElement('canvas');\r\n    const context = canvas.getContext('2d');\r\n    \r\n    // Set canvas size to video dimensions\r\n    canvas.width = videoElement.videoWidth;\r\n    canvas.height = videoElement.videoHeight;\r\n    \r\n    // Draw the current video frame to the canvas\r\n    context.drawImage(videoElement, 0, 0, canvas.width, canvas.height);\r\n    \r\n    // Draw a box around the detected face\r\n    if (detection.detection) {\r\n      const box = detection.detection.box;\r\n      context.strokeStyle = '#00ff00'; // Green box\r\n      context.lineWidth = 3;\r\n      context.strokeRect(box.x, box.y, box.width, box.height);\r\n      \r\n      // Add user information text\r\n      context.fillStyle = 'rgba(0, 0, 0, 0.5)';\r\n      context.fillRect(box.x, box.y - 30, box.width, 30);\r\n      context.fillStyle = '#ffffff';\r\n      context.font = '16px Arial';\r\n      context.fillText(username, box.x + 5, box.y - 10);\r\n    }\r\n    \r\n    // Convert canvas to blob\r\n    const imageBlob = await new Promise(resolve => {\r\n      canvas.toBlob(blob => resolve(blob), 'image/jpeg', 0.95);\r\n    });\r\n    \r\n    // Create a URL for the blob (for preview or immediate use)\r\n    const imageUrl = URL.createObjectURL(imageBlob);\r\n    \r\n    // Save the image file using native browser download\r\n    const filename = `${FACE_DATA_DIR}_photo_${username}_${userId}.jpg`;\r\n    createDownloadLink(imageBlob, filename);\r\n    \r\n    console.log(`Face image prepared for download: ${filename}`);\r\n    return imageUrl;\r\n  } catch (error) {\r\n    console.error(\"Error capturing face image:\", error);\r\n    return null;\r\n  }\r\n};\r\n\r\n/**\r\n * Creates a download link and triggers download\r\n * @param {Blob} blob - The blob to download\r\n * @param {string} filename - Name for the downloaded file\r\n */\r\nfunction createDownloadLink(blob, filename) {\r\n  const downloadLink = document.createElement('a');\r\n  downloadLink.href = URL.createObjectURL(blob);\r\n  downloadLink.download = filename;\r\n  downloadLink.style.display = 'none';\r\n  document.body.appendChild(downloadLink);\r\n  downloadLink.click();\r\n  \r\n  // Clean up after download starts\r\n  setTimeout(() => {\r\n    document.body.removeChild(downloadLink);\r\n    URL.revokeObjectURL(downloadLink.href);\r\n  }, 100);\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}