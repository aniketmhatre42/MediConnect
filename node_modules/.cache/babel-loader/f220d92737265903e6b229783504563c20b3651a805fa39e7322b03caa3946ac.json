{"ast":null,"code":"import { ref, set, get, remove } from \"firebase/database\";\nimport { rtdb } from \"../firebase/config\";\n\n// Reference to faces in Firebase Realtime Database\nconst FACES_REF = \"faces\";\n\n/**\r\n * Save face descriptor to Firebase Realtime Database\r\n * @param {string} userId - User ID\r\n * @param {Float32Array} descriptor - Face descriptor data\r\n * @returns {Promise<boolean>} Success status\r\n */\nexport const saveFaceToFirebase = async (userId, descriptor) => {\n  try {\n    if (!userId || !descriptor) {\n      console.error(\"Missing required parameters for saving face data\");\n      return false;\n    }\n    console.log(`Attempting to save face data to Firebase for user ${userId}...`);\n\n    // Verify rtdb is initialized\n    if (!rtdb) {\n      console.error(\"Firebase Realtime Database not initialized\");\n      return false;\n    }\n\n    // Convert descriptor to regular array for storage\n    const descriptorArray = Array.from(descriptor);\n    const faceRef = ref(rtdb, `${FACES_REF}/${userId}`);\n\n    // Store face data with timestamp\n    await set(faceRef, {\n      userId,\n      descriptor: descriptorArray,\n      timestamp: new Date().toISOString()\n    });\n    console.log(`Face descriptor for ${userId} saved to Firebase successfully`);\n    return true;\n  } catch (error) {\n    console.error(\"Error saving face to Firebase:\", error);\n    // Return false but don't throw, so the process can continue with localStorage\n    return false;\n  }\n};\n\n/**\r\n * Get face descriptor from Firebase Realtime Database\r\n * @param {string} userId - User ID\r\n * @returns {Promise<Float32Array|null>} Face descriptor or null if not found\r\n */\nexport const getFaceFromFirebase = async userId => {\n  try {\n    if (!userId) {\n      console.error(\"User ID is required to get face data\");\n      return null;\n    }\n    const faceRef = ref(rtdb, `${FACES_REF}/${userId}`);\n    const snapshot = await get(faceRef);\n    if (snapshot.exists()) {\n      const data = snapshot.val();\n      if (data && data.descriptor) {\n        console.log(`Face descriptor for ${userId} retrieved from Firebase`);\n        return new Float32Array(data.descriptor);\n      }\n    }\n    console.log(`No face descriptor found for ${userId} in Firebase`);\n    return null;\n  } catch (error) {\n    console.error(\"Error getting face from Firebase:\", error);\n    return null;\n  }\n};\n\n/**\r\n * Remove face descriptor from Firebase Realtime Database\r\n * @param {string} userId - User ID\r\n * @returns {Promise<boolean>} Success status\r\n */\nexport const removeFaceFromFirebase = async userId => {\n  try {\n    if (!userId) {\n      console.error(\"User ID is required to remove face data\");\n      return false;\n    }\n    const faceRef = ref(rtdb, `${FACES_REF}/${userId}`);\n    await remove(faceRef);\n    console.log(`Face descriptor for ${userId} removed from Firebase`);\n    return true;\n  } catch (error) {\n    console.error(\"Error removing face from Firebase:\", error);\n    return false;\n  }\n};\n\n/**\r\n * Check if user has face data in Firebase\r\n * @param {string} userId - User ID\r\n * @returns {Promise<boolean>} Whether face data exists\r\n */\nexport const hasFaceInFirebase = async userId => {\n  try {\n    if (!userId) return false;\n    const faceRef = ref(rtdb, `${FACES_REF}/${userId}`);\n    const snapshot = await get(faceRef);\n    return snapshot.exists();\n  } catch (error) {\n    console.error(\"Error checking face in Firebase:\", error);\n    return false;\n  }\n};","map":{"version":3,"names":["ref","set","get","remove","rtdb","FACES_REF","saveFaceToFirebase","userId","descriptor","console","error","log","descriptorArray","Array","from","faceRef","timestamp","Date","toISOString","getFaceFromFirebase","snapshot","exists","data","val","Float32Array","removeFaceFromFirebase","hasFaceInFirebase"],"sources":["D:/Movies/Aniket/test2/test/src/services/firebaseFaceService.js"],"sourcesContent":["import { ref, set, get, remove } from \"firebase/database\";\r\nimport { rtdb } from \"../firebase/config\";\r\n\r\n// Reference to faces in Firebase Realtime Database\r\nconst FACES_REF = \"faces\";\r\n\r\n/**\r\n * Save face descriptor to Firebase Realtime Database\r\n * @param {string} userId - User ID\r\n * @param {Float32Array} descriptor - Face descriptor data\r\n * @returns {Promise<boolean>} Success status\r\n */\r\nexport const saveFaceToFirebase = async (userId, descriptor) => {\r\n  try {\r\n    if (!userId || !descriptor) {\r\n      console.error(\"Missing required parameters for saving face data\");\r\n      return false;\r\n    }\r\n\r\n    console.log(`Attempting to save face data to Firebase for user ${userId}...`);\r\n    \r\n    // Verify rtdb is initialized\r\n    if (!rtdb) {\r\n      console.error(\"Firebase Realtime Database not initialized\");\r\n      return false;\r\n    }\r\n\r\n    // Convert descriptor to regular array for storage\r\n    const descriptorArray = Array.from(descriptor);\r\n    \r\n    const faceRef = ref(rtdb, `${FACES_REF}/${userId}`);\r\n    \r\n    // Store face data with timestamp\r\n    await set(faceRef, {\r\n      userId,\r\n      descriptor: descriptorArray,\r\n      timestamp: new Date().toISOString()\r\n    });\r\n    \r\n    console.log(`Face descriptor for ${userId} saved to Firebase successfully`);\r\n    return true;\r\n  } catch (error) {\r\n    console.error(\"Error saving face to Firebase:\", error);\r\n    // Return false but don't throw, so the process can continue with localStorage\r\n    return false;\r\n  }\r\n};\r\n\r\n/**\r\n * Get face descriptor from Firebase Realtime Database\r\n * @param {string} userId - User ID\r\n * @returns {Promise<Float32Array|null>} Face descriptor or null if not found\r\n */\r\nexport const getFaceFromFirebase = async (userId) => {\r\n  try {\r\n    if (!userId) {\r\n      console.error(\"User ID is required to get face data\");\r\n      return null;\r\n    }\r\n    \r\n    const faceRef = ref(rtdb, `${FACES_REF}/${userId}`);\r\n    const snapshot = await get(faceRef);\r\n    \r\n    if (snapshot.exists()) {\r\n      const data = snapshot.val();\r\n      if (data && data.descriptor) {\r\n        console.log(`Face descriptor for ${userId} retrieved from Firebase`);\r\n        return new Float32Array(data.descriptor);\r\n      }\r\n    }\r\n    \r\n    console.log(`No face descriptor found for ${userId} in Firebase`);\r\n    return null;\r\n  } catch (error) {\r\n    console.error(\"Error getting face from Firebase:\", error);\r\n    return null;\r\n  }\r\n};\r\n\r\n/**\r\n * Remove face descriptor from Firebase Realtime Database\r\n * @param {string} userId - User ID\r\n * @returns {Promise<boolean>} Success status\r\n */\r\nexport const removeFaceFromFirebase = async (userId) => {\r\n  try {\r\n    if (!userId) {\r\n      console.error(\"User ID is required to remove face data\");\r\n      return false;\r\n    }\r\n    \r\n    const faceRef = ref(rtdb, `${FACES_REF}/${userId}`);\r\n    await remove(faceRef);\r\n    \r\n    console.log(`Face descriptor for ${userId} removed from Firebase`);\r\n    return true;\r\n  } catch (error) {\r\n    console.error(\"Error removing face from Firebase:\", error);\r\n    return false;\r\n  }\r\n};\r\n\r\n/**\r\n * Check if user has face data in Firebase\r\n * @param {string} userId - User ID\r\n * @returns {Promise<boolean>} Whether face data exists\r\n */\r\nexport const hasFaceInFirebase = async (userId) => {\r\n  try {\r\n    if (!userId) return false;\r\n    \r\n    const faceRef = ref(rtdb, `${FACES_REF}/${userId}`);\r\n    const snapshot = await get(faceRef);\r\n    \r\n    return snapshot.exists();\r\n  } catch (error) {\r\n    console.error(\"Error checking face in Firebase:\", error);\r\n    return false;\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}