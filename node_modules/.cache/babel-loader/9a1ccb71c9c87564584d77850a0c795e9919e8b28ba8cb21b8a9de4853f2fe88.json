{"ast":null,"code":"/**\r\n * Utility functions for authentication\r\n */\n\n/**\r\n * Check if user is logged in by examining session and local storage\r\n * @returns {Object|null} User object if logged in, null if not\r\n */\nexport const getLoggedInUser = () => {\n  // Check if this is a regular user (not Asha worker)\n  const userType = sessionStorage.getItem('userType');\n  const userId = sessionStorage.getItem('userId');\n\n  // For regular users\n  if (userId && userType === 'regular') {\n    var _sessionStorage$getIt;\n    return {\n      id: userId,\n      role: 'user',\n      username: sessionStorage.getItem('username') || ((_sessionStorage$getIt = sessionStorage.getItem('userEmail')) === null || _sessionStorage$getIt === void 0 ? void 0 : _sessionStorage$getIt.split('@')[0]) || 'User'\n    };\n  }\n\n  // If specifically looking for an Asha Worker login\n  if (userId && sessionStorage.getItem('userRole') === 'ashaWorker') {\n    return {\n      id: userId,\n      role: 'ashaWorker',\n      username: sessionStorage.getItem('workerName') || sessionStorage.getItem('userEmail') || 'Asha Worker'\n    };\n  }\n\n  // Check local storage as fallback (for persistent auth)\n  try {\n    const localUser = localStorage.getItem('user');\n    if (localUser) {\n      var _userData$email;\n      const userData = JSON.parse(localUser);\n      return {\n        id: userData.id || userData.userId,\n        username: userData.username || ((_userData$email = userData.email) === null || _userData$email === void 0 ? void 0 : _userData$email.split('@')[0]) || 'User',\n        role: userData.role || 'user'\n      };\n    }\n  } catch (error) {\n    console.error(\"Error parsing user data from localStorage:\", error);\n  }\n  return null;\n};\n\n/**\r\n * Check if user is authenticated as a regular user (not Asha worker)\r\n * @returns {boolean} True if user is logged in as a regular user\r\n */\nexport const isAuthenticated = () => {\n  // Check if user is logged in and is not an Asha worker\n  const user = getLoggedInUser();\n  return user !== null && user.role !== 'ashaWorker';\n};\n\n/**\r\n * Check if user is authenticated as an Asha worker\r\n * @returns {boolean} True if logged in as an Asha worker\r\n */\nexport const isAshaWorker = () => {\n  const user = getLoggedInUser();\n  return user !== null && user.role === 'ashaWorker';\n};\n\n/**\r\n * Log out the current user by clearing session and local storage\r\n * @param {string} userType - Optional, can be 'regular' or 'ashaWorker'\r\n */\nexport const logoutUser = (userType = null) => {\n  if (!userType || userType === 'regular') {\n    // Clear regular user session data\n    sessionStorage.removeItem('authenticated');\n    sessionStorage.removeItem('userType');\n    sessionStorage.removeItem('userId');\n    sessionStorage.removeItem('username');\n    sessionStorage.removeItem('userEmail');\n    sessionStorage.removeItem('loginMethod');\n    sessionStorage.removeItem('loginTime');\n\n    // Clear localStorage data\n    localStorage.removeItem('user');\n  }\n  if (!userType || userType === 'ashaWorker') {\n    // Clear Asha worker data\n    sessionStorage.removeItem('userRole');\n    sessionStorage.removeItem('workerName');\n    sessionStorage.removeItem('workerDistrict');\n  }\n  return true;\n};","map":{"version":3,"names":["getLoggedInUser","userType","sessionStorage","getItem","userId","_sessionStorage$getIt","id","role","username","split","localUser","localStorage","_userData$email","userData","JSON","parse","email","error","console","isAuthenticated","user","isAshaWorker","logoutUser","removeItem"],"sources":["D:/Movies/Aniket/test2/test/src/utils/authUtils.js"],"sourcesContent":["/**\r\n * Utility functions for authentication\r\n */\r\n\r\n/**\r\n * Check if user is logged in by examining session and local storage\r\n * @returns {Object|null} User object if logged in, null if not\r\n */\r\nexport const getLoggedInUser = () => {\r\n  // Check if this is a regular user (not Asha worker)\r\n  const userType = sessionStorage.getItem('userType');\r\n  const userId = sessionStorage.getItem('userId');\r\n  \r\n  // For regular users\r\n  if (userId && userType === 'regular') {\r\n    return {\r\n      id: userId,\r\n      role: 'user',\r\n      username: sessionStorage.getItem('username') || \r\n               sessionStorage.getItem('userEmail')?.split('@')[0] || \r\n               'User'\r\n    };\r\n  }\r\n  \r\n  // If specifically looking for an Asha Worker login\r\n  if (userId && sessionStorage.getItem('userRole') === 'ashaWorker') {\r\n    return {\r\n      id: userId,\r\n      role: 'ashaWorker',\r\n      username: sessionStorage.getItem('workerName') || \r\n               sessionStorage.getItem('userEmail') || \r\n               'Asha Worker'\r\n    };\r\n  }\r\n\r\n  // Check local storage as fallback (for persistent auth)\r\n  try {\r\n    const localUser = localStorage.getItem('user');\r\n    if (localUser) {\r\n      const userData = JSON.parse(localUser);\r\n      return {\r\n        id: userData.id || userData.userId,\r\n        username: userData.username || userData.email?.split('@')[0] || 'User',\r\n        role: userData.role || 'user'\r\n      };\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error parsing user data from localStorage:\", error);\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\n/**\r\n * Check if user is authenticated as a regular user (not Asha worker)\r\n * @returns {boolean} True if user is logged in as a regular user\r\n */\r\nexport const isAuthenticated = () => {\r\n  // Check if user is logged in and is not an Asha worker\r\n  const user = getLoggedInUser();\r\n  return user !== null && user.role !== 'ashaWorker';\r\n};\r\n\r\n/**\r\n * Check if user is authenticated as an Asha worker\r\n * @returns {boolean} True if logged in as an Asha worker\r\n */\r\nexport const isAshaWorker = () => {\r\n  const user = getLoggedInUser();\r\n  return user !== null && user.role === 'ashaWorker';\r\n};\r\n\r\n/**\r\n * Log out the current user by clearing session and local storage\r\n * @param {string} userType - Optional, can be 'regular' or 'ashaWorker'\r\n */\r\nexport const logoutUser = (userType = null) => {\r\n  if (!userType || userType === 'regular') {\r\n    // Clear regular user session data\r\n    sessionStorage.removeItem('authenticated');\r\n    sessionStorage.removeItem('userType');\r\n    sessionStorage.removeItem('userId');\r\n    sessionStorage.removeItem('username');\r\n    sessionStorage.removeItem('userEmail');\r\n    sessionStorage.removeItem('loginMethod');\r\n    sessionStorage.removeItem('loginTime');\r\n    \r\n    // Clear localStorage data\r\n    localStorage.removeItem('user');\r\n  }\r\n  \r\n  if (!userType || userType === 'ashaWorker') {\r\n    // Clear Asha worker data\r\n    sessionStorage.removeItem('userRole');\r\n    sessionStorage.removeItem('workerName');\r\n    sessionStorage.removeItem('workerDistrict');\r\n  }\r\n  \r\n  return true;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}