{"ast":null,"code":"// Local storage service for face data management\n\n// Base directory name (for naming convention only)\nconst FACE_DATA_DIR = 'face_data';\n\n/**\r\n * Saves face descriptor data to localStorage\r\n * @param {string} userId - The unique user ID\r\n * @param {Float32Array} descriptor - The face descriptor data\r\n * @returns {Promise<boolean>} - Whether the save was successful\r\n */\nexport const saveFaceDescriptor = async (userId, descriptor) => {\n  try {\n    console.log(`Saving face descriptor for user ${userId}`);\n\n    // Convert descriptor to regular array for JSON serialization\n    const descriptorArray = Array.from(descriptor);\n\n    // Store in localStorage\n    storeLocalCopy(userId, descriptorArray);\n    console.log(`Face descriptor saved successfully for user: ${userId}`);\n    return true;\n  } catch (error) {\n    console.error('Error saving face descriptor:', error);\n    return false;\n  }\n};\n\n/**\r\n * Loads face descriptor data from localStorage\r\n * @param {string} userId - The unique user ID\r\n * @returns {Float32Array|null} - The face descriptor or null if not found\r\n */\nexport const loadFaceDescriptor = userId => {\n  try {\n    const localCopy = getLocalCopy(userId);\n    if (localCopy) {\n      return new Float32Array(localCopy);\n    }\n    return null;\n  } catch (error) {\n    console.error('Error loading face descriptor:', error);\n    return null;\n  }\n};\n\n/**\r\n * Stores the face data in localStorage\r\n * @param {string} userId - The unique user ID\r\n * @param {Array} descriptorArray - The face descriptor array\r\n */\nconst storeLocalCopy = (userId, descriptorArray) => {\n  try {\n    const faceDescriptors = JSON.parse(localStorage.getItem('face_descriptors') || '[]');\n\n    // Check if this user already has a descriptor\n    const existingIndex = faceDescriptors.findIndex(item => item.userId === userId);\n    if (existingIndex >= 0) {\n      faceDescriptors[existingIndex].descriptor = descriptorArray;\n      faceDescriptors[existingIndex].timestamp = new Date().toISOString();\n      console.log(`Updated existing face descriptor for user ${userId}`);\n    } else {\n      faceDescriptors.push({\n        userId,\n        descriptor: descriptorArray,\n        timestamp: new Date().toISOString()\n      });\n      console.log(`Added new face descriptor for user ${userId}`);\n    }\n    localStorage.setItem('face_descriptors', JSON.stringify(faceDescriptors));\n\n    // Verify data was saved\n    const verify = localStorage.getItem('face_descriptors');\n    if (verify) {\n      const parsed = JSON.parse(verify);\n      console.log(`Successfully saved face data. Total entries: ${parsed.length}`);\n    }\n  } catch (e) {\n    console.error('Error storing face data in localStorage:', e);\n    throw e;\n  }\n};\n\n/**\r\n * Gets a face descriptor from localStorage\r\n * @param {string} userId - The unique user ID\r\n * @returns {Array|null} - The descriptor array or null if not found\r\n */\nconst getLocalCopy = userId => {\n  try {\n    const faceDescriptors = JSON.parse(localStorage.getItem('face_descriptors') || '[]');\n    const userFace = faceDescriptors.find(item => item.userId === userId);\n    return userFace ? userFace.descriptor : null;\n  } catch (e) {\n    console.error('Error getting face data from localStorage:', e);\n    return null;\n  }\n};\n\n/**\r\n * Removes a face descriptor from localStorage\r\n * @param {string} userId - The unique user ID\r\n * @returns {boolean} - Whether the removal was successful\r\n */\nexport const removeFaceDescriptor = userId => {\n  try {\n    // Remove from localStorage\n    const faceDescriptors = JSON.parse(localStorage.getItem('face_descriptors') || '[]');\n    const filteredDescriptors = faceDescriptors.filter(item => item.userId !== userId);\n    localStorage.setItem('face_descriptors', JSON.stringify(filteredDescriptors));\n    console.log(`Face descriptor for user ${userId} removed from local storage`);\n    return true;\n  } catch (error) {\n    console.error('Error removing face descriptor:', error);\n    return false;\n  }\n};\n\n/**\r\n * Lists all user IDs with stored face descriptors in localStorage\r\n * @returns {Array<string>} - Array of user IDs\r\n */\nexport const listFaceUsers = () => {\n  try {\n    const faceDescriptors = JSON.parse(localStorage.getItem('face_descriptors') || '[]');\n    return faceDescriptors.map(item => item.userId);\n  } catch (error) {\n    console.error('Error listing face users:', error);\n    return [];\n  }\n};","map":{"version":3,"names":["FACE_DATA_DIR","saveFaceDescriptor","userId","descriptor","console","log","descriptorArray","Array","from","storeLocalCopy","error","loadFaceDescriptor","localCopy","getLocalCopy","Float32Array","faceDescriptors","JSON","parse","localStorage","getItem","existingIndex","findIndex","item","timestamp","Date","toISOString","push","setItem","stringify","verify","parsed","length","e","userFace","find","removeFaceDescriptor","filteredDescriptors","filter","listFaceUsers","map"],"sources":["D:/Movies/Aniket/test2/test/src/services/localFaceStorage.js"],"sourcesContent":["// Local storage service for face data management\r\n\r\n// Base directory name (for naming convention only)\r\nconst FACE_DATA_DIR = 'face_data';\r\n\r\n/**\r\n * Saves face descriptor data to localStorage\r\n * @param {string} userId - The unique user ID\r\n * @param {Float32Array} descriptor - The face descriptor data\r\n * @returns {Promise<boolean>} - Whether the save was successful\r\n */\r\nexport const saveFaceDescriptor = async (userId, descriptor) => {\r\n  try {\r\n    console.log(`Saving face descriptor for user ${userId}`);\r\n    \r\n    // Convert descriptor to regular array for JSON serialization\r\n    const descriptorArray = Array.from(descriptor);\r\n    \r\n    // Store in localStorage\r\n    storeLocalCopy(userId, descriptorArray);\r\n    \r\n    console.log(`Face descriptor saved successfully for user: ${userId}`);\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error saving face descriptor:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n/**\r\n * Loads face descriptor data from localStorage\r\n * @param {string} userId - The unique user ID\r\n * @returns {Float32Array|null} - The face descriptor or null if not found\r\n */\r\nexport const loadFaceDescriptor = (userId) => {\r\n  try {\r\n    const localCopy = getLocalCopy(userId);\r\n    if (localCopy) {\r\n      return new Float32Array(localCopy);\r\n    }\r\n    return null;\r\n  } catch (error) {\r\n    console.error('Error loading face descriptor:', error);\r\n    return null;\r\n  }\r\n};\r\n\r\n/**\r\n * Stores the face data in localStorage\r\n * @param {string} userId - The unique user ID\r\n * @param {Array} descriptorArray - The face descriptor array\r\n */\r\nconst storeLocalCopy = (userId, descriptorArray) => {\r\n  try {\r\n    const faceDescriptors = JSON.parse(localStorage.getItem('face_descriptors') || '[]');\r\n    \r\n    // Check if this user already has a descriptor\r\n    const existingIndex = faceDescriptors.findIndex(item => item.userId === userId);\r\n    \r\n    if (existingIndex >= 0) {\r\n      faceDescriptors[existingIndex].descriptor = descriptorArray;\r\n      faceDescriptors[existingIndex].timestamp = new Date().toISOString();\r\n      console.log(`Updated existing face descriptor for user ${userId}`);\r\n    } else {\r\n      faceDescriptors.push({\r\n        userId,\r\n        descriptor: descriptorArray,\r\n        timestamp: new Date().toISOString()\r\n      });\r\n      console.log(`Added new face descriptor for user ${userId}`);\r\n    }\r\n    \r\n    localStorage.setItem('face_descriptors', JSON.stringify(faceDescriptors));\r\n    \r\n    // Verify data was saved\r\n    const verify = localStorage.getItem('face_descriptors');\r\n    if (verify) {\r\n      const parsed = JSON.parse(verify);\r\n      console.log(`Successfully saved face data. Total entries: ${parsed.length}`);\r\n    }\r\n  } catch (e) {\r\n    console.error('Error storing face data in localStorage:', e);\r\n    throw e;\r\n  }\r\n};\r\n\r\n/**\r\n * Gets a face descriptor from localStorage\r\n * @param {string} userId - The unique user ID\r\n * @returns {Array|null} - The descriptor array or null if not found\r\n */\r\nconst getLocalCopy = (userId) => {\r\n  try {\r\n    const faceDescriptors = JSON.parse(localStorage.getItem('face_descriptors') || '[]');\r\n    const userFace = faceDescriptors.find(item => item.userId === userId);\r\n    return userFace ? userFace.descriptor : null;\r\n  } catch (e) {\r\n    console.error('Error getting face data from localStorage:', e);\r\n    return null;\r\n  }\r\n};\r\n\r\n/**\r\n * Removes a face descriptor from localStorage\r\n * @param {string} userId - The unique user ID\r\n * @returns {boolean} - Whether the removal was successful\r\n */\r\nexport const removeFaceDescriptor = (userId) => {\r\n  try {\r\n    // Remove from localStorage\r\n    const faceDescriptors = JSON.parse(localStorage.getItem('face_descriptors') || '[]');\r\n    const filteredDescriptors = faceDescriptors.filter(item => item.userId !== userId);\r\n    localStorage.setItem('face_descriptors', JSON.stringify(filteredDescriptors));\r\n    \r\n    console.log(`Face descriptor for user ${userId} removed from local storage`);\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error removing face descriptor:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n/**\r\n * Lists all user IDs with stored face descriptors in localStorage\r\n * @returns {Array<string>} - Array of user IDs\r\n */\r\nexport const listFaceUsers = () => {\r\n  try {\r\n    const faceDescriptors = JSON.parse(localStorage.getItem('face_descriptors') || '[]');\r\n    return faceDescriptors.map(item => item.userId);\r\n  } catch (error) {\r\n    console.error('Error listing face users:', error);\r\n    return [];\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}