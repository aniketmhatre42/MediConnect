{"ast":null,"code":"import { ref, set, get, update, serverTimestamp } from \"firebase/database\";\nimport { rtdb } from \"../firebase/config\";\n\n/**\r\n * Create a persistent user session in Firebase RTDB\r\n * @param {string} userId - User ID\r\n * @param {Object} sessionData - Session data to store\r\n * @returns {Promise<boolean>} - Success status\r\n */\nexport const createUserSession = async (userId, sessionData) => {\n  try {\n    if (!userId || !sessionData) {\n      console.error(\"Invalid user data for session creation\");\n      return false;\n    }\n\n    // Create a new session under this user\n    const sessionRef = ref(rtdb, `sessions/${userId}/${Date.now()}`);\n\n    // Add server timestamp and status\n    const enhancedSessionData = {\n      ...sessionData,\n      createdAt: serverTimestamp(),\n      lastActive: serverTimestamp(),\n      active: true,\n      device: sessionData.device || navigator.userAgent\n    };\n    await set(sessionRef, enhancedSessionData);\n    console.log(\"User session created successfully\");\n    return true;\n  } catch (error) {\n    console.error(\"Error creating user session:\", error);\n    return false;\n  }\n};\n\n/**\r\n * Check if user is authenticated\r\n * @returns {boolean} True if user is logged in\r\n */\nexport const isAuthenticated = () => {\n  const authenticated = sessionStorage.getItem('authenticated') === 'true';\n  const userId = sessionStorage.getItem('userId');\n  const username = sessionStorage.getItem('username');\n  return authenticated && userId && username;\n};\n\n/**\r\n * Get the authenticated user's information\r\n * @returns {Object|null} User information or null if not authenticated\r\n */\nexport const getAuthenticatedUser = () => {\n  if (!isAuthenticated()) {\n    return null;\n  }\n  return {\n    userId: sessionStorage.getItem('userId'),\n    username: sessionStorage.getItem('username'),\n    loginMethod: sessionStorage.getItem('loginMethod'),\n    loginTime: sessionStorage.getItem('loginTime')\n  };\n};\n\n/**\r\n * Log out the current user\r\n */\nexport const logout = async () => {\n  // Get userId before clearing\n  const userId = sessionStorage.getItem('userId');\n\n  // Update session status in Firebase if userId exists\n  if (userId) {\n    try {\n      // Get active sessions for this user\n      const sessionsRef = ref(rtdb, `sessions/${userId}`);\n      const snapshot = await get(sessionsRef);\n      if (snapshot.exists()) {\n        const sessions = snapshot.val();\n        const updates = {};\n\n        // Find active sessions and mark them as inactive\n        Object.entries(sessions).forEach(([sessionId, session]) => {\n          if (session.active) {\n            updates[`sessions/${userId}/${sessionId}/active`] = false;\n            updates[`sessions/${userId}/${sessionId}/logoutTime`] = serverTimestamp();\n          }\n        });\n        if (Object.keys(updates).length > 0) {\n          await update(ref(rtdb), updates);\n        }\n      }\n    } catch (error) {\n      console.error(\"Error updating session on logout:\", error);\n    }\n  }\n\n  // Clear session storage\n  sessionStorage.removeItem('authenticated');\n  sessionStorage.removeItem('userId');\n  sessionStorage.removeItem('username');\n  sessionStorage.removeItem('loginMethod');\n  sessionStorage.removeItem('loginTime');\n\n  // Clear local storage\n  localStorage.removeItem('user');\n};","map":{"version":3,"names":["ref","set","get","update","serverTimestamp","rtdb","createUserSession","userId","sessionData","console","error","sessionRef","Date","now","enhancedSessionData","createdAt","lastActive","active","device","navigator","userAgent","log","isAuthenticated","authenticated","sessionStorage","getItem","username","getAuthenticatedUser","loginMethod","loginTime","logout","sessionsRef","snapshot","exists","sessions","val","updates","Object","entries","forEach","sessionId","session","keys","length","removeItem","localStorage"],"sources":["D:/Movies/Aniket/test2/test/src/utils/authUtils.js"],"sourcesContent":["import { ref, set, get, update, serverTimestamp } from \"firebase/database\";\r\nimport { rtdb } from \"../firebase/config\";\r\n\r\n/**\r\n * Create a persistent user session in Firebase RTDB\r\n * @param {string} userId - User ID\r\n * @param {Object} sessionData - Session data to store\r\n * @returns {Promise<boolean>} - Success status\r\n */\r\nexport const createUserSession = async (userId, sessionData) => {\r\n  try {\r\n    if (!userId || !sessionData) {\r\n      console.error(\"Invalid user data for session creation\");\r\n      return false;\r\n    }\r\n    \r\n    // Create a new session under this user\r\n    const sessionRef = ref(rtdb, `sessions/${userId}/${Date.now()}`);\r\n    \r\n    // Add server timestamp and status\r\n    const enhancedSessionData = {\r\n      ...sessionData,\r\n      createdAt: serverTimestamp(),\r\n      lastActive: serverTimestamp(),\r\n      active: true,\r\n      device: sessionData.device || navigator.userAgent\r\n    };\r\n    \r\n    await set(sessionRef, enhancedSessionData);\r\n    \r\n    console.log(\"User session created successfully\");\r\n    return true;\r\n  } catch (error) {\r\n    console.error(\"Error creating user session:\", error);\r\n    return false;\r\n  }\r\n};\r\n\r\n/**\r\n * Check if user is authenticated\r\n * @returns {boolean} True if user is logged in\r\n */\r\nexport const isAuthenticated = () => {\r\n  const authenticated = sessionStorage.getItem('authenticated') === 'true';\r\n  const userId = sessionStorage.getItem('userId');\r\n  const username = sessionStorage.getItem('username');\r\n  \r\n  return authenticated && userId && username;\r\n};\r\n\r\n/**\r\n * Get the authenticated user's information\r\n * @returns {Object|null} User information or null if not authenticated\r\n */\r\nexport const getAuthenticatedUser = () => {\r\n  if (!isAuthenticated()) {\r\n    return null;\r\n  }\r\n  \r\n  return {\r\n    userId: sessionStorage.getItem('userId'),\r\n    username: sessionStorage.getItem('username'),\r\n    loginMethod: sessionStorage.getItem('loginMethod'),\r\n    loginTime: sessionStorage.getItem('loginTime')\r\n  };\r\n};\r\n\r\n/**\r\n * Log out the current user\r\n */\r\nexport const logout = async () => {\r\n  // Get userId before clearing\r\n  const userId = sessionStorage.getItem('userId');\r\n  \r\n  // Update session status in Firebase if userId exists\r\n  if (userId) {\r\n    try {\r\n      // Get active sessions for this user\r\n      const sessionsRef = ref(rtdb, `sessions/${userId}`);\r\n      const snapshot = await get(sessionsRef);\r\n      \r\n      if (snapshot.exists()) {\r\n        const sessions = snapshot.val();\r\n        const updates = {};\r\n        \r\n        // Find active sessions and mark them as inactive\r\n        Object.entries(sessions).forEach(([sessionId, session]) => {\r\n          if (session.active) {\r\n            updates[`sessions/${userId}/${sessionId}/active`] = false;\r\n            updates[`sessions/${userId}/${sessionId}/logoutTime`] = serverTimestamp();\r\n          }\r\n        });\r\n        \r\n        if (Object.keys(updates).length > 0) {\r\n          await update(ref(rtdb), updates);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error updating session on logout:\", error);\r\n    }\r\n  }\r\n  \r\n  // Clear session storage\r\n  sessionStorage.removeItem('authenticated');\r\n  sessionStorage.removeItem('userId');\r\n  sessionStorage.removeItem('username');\r\n  sessionStorage.removeItem('loginMethod');\r\n  sessionStorage.removeItem('loginTime');\r\n  \r\n  // Clear local storage\r\n  localStorage.removeItem('user');\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}