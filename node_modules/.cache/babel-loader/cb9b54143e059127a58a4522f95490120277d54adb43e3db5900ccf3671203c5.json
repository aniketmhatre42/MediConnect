{"ast":null,"code":"import { createUserWithEmailAndPassword, signInWithEmailAndPassword, updateProfile, signOut } from 'firebase/auth';\nimport { doc, setDoc, getDoc, updateDoc, serverTimestamp } from 'firebase/firestore';\nimport { auth, db } from './config';\n\n/**\r\n * Register a new user with email and password\r\n * @param {string} email - User email\r\n * @param {string} password - User password\r\n * @param {string} username - Username for display\r\n * @param {boolean} hasFaceAuth - Whether user has set up face authentication\r\n * @returns {Promise<Object>} - User data including firebase UID\r\n */\nexport const registerUser = async (email, password, username, hasFaceAuth = false) => {\n  try {\n    // Create the user in Firebase Auth\n    const userCredential = await createUserWithEmailAndPassword(auth, email, password);\n    const user = userCredential.user;\n\n    // Update the user profile to include the username\n    await updateProfile(user, {\n      displayName: username\n    });\n\n    // Create user document in Firestore\n    const userData = {\n      userId: user.uid,\n      email: user.email,\n      username,\n      hasFaceAuth,\n      createdAt: serverTimestamp(),\n      lastLogin: serverTimestamp()\n    };\n    await setDoc(doc(db, 'users', user.uid), userData);\n    console.log('User registered successfully:', user.uid);\n    return {\n      ...userData,\n      createdAt: new Date().toISOString() // Convert timestamp to string for immediate use\n    };\n  } catch (error) {\n    console.error('Error registering user:', error);\n    throw error;\n  }\n};\n\n/**\r\n * Sign in a user with email and password\r\n * @param {string} email - User email\r\n * @param {string} password - User password\r\n * @returns {Promise<Object>} - User data\r\n */\nexport const signInUser = async (email, password) => {\n  try {\n    const userCredential = await signInWithEmailAndPassword(auth, email, password);\n    const user = userCredential.user;\n\n    // Update last login timestamp in Firestore\n    const userRef = doc(db, 'users', user.uid);\n    await updateDoc(userRef, {\n      lastLogin: serverTimestamp()\n    });\n\n    // Get full user data\n    const userDoc = await getDoc(userRef);\n    if (userDoc.exists()) {\n      const userData = userDoc.data();\n      console.log('User signed in successfully:', user.uid);\n      return userData;\n    } else {\n      throw new Error('User document not found in database');\n    }\n  } catch (error) {\n    console.error('Error signing in:', error);\n    throw error;\n  }\n};\n\n/**\r\n * Update user's face authentication status\r\n * @param {string} userId - User ID\r\n * @param {boolean} hasFaceAuth - Whether user has face auth enabled\r\n */\nexport const updateFaceAuthStatus = async (userId, hasFaceAuth) => {\n  try {\n    const userRef = doc(db, 'users', userId);\n    await updateDoc(userRef, {\n      hasFaceAuth,\n      lastUpdated: serverTimestamp()\n    });\n    console.log(`Face auth status updated for user ${userId}: ${hasFaceAuth}`);\n    return true;\n  } catch (error) {\n    console.error('Error updating face auth status:', error);\n    return false;\n  }\n};\n\n/**\r\n * Sign out the current user\r\n */\nexport const signOutUser = async () => {\n  try {\n    await signOut(auth);\n    console.log('User signed out successfully');\n    return true;\n  } catch (error) {\n    console.error('Error signing out:', error);\n    return false;\n  }\n};\n\n/**\r\n * Get the current signed-in user\r\n * @returns {Object|null} - The current user or null if not signed in\r\n */\nexport const getCurrentUser = () => {\n  return auth.currentUser;\n};\n\n/**\r\n * Get user data from Firestore\r\n * @param {string} userId - User ID\r\n * @returns {Promise<Object|null>} - User data or null if not found\r\n */\nexport const getUserData = async userId => {\n  try {\n    const userRef = doc(db, 'users', userId);\n    const userDoc = await getDoc(userRef);\n    if (userDoc.exists()) {\n      return userDoc.data();\n    }\n    return null;\n  } catch (error) {\n    console.error('Error getting user data:', error);\n    return null;\n  }\n};","map":{"version":3,"names":["createUserWithEmailAndPassword","signInWithEmailAndPassword","updateProfile","signOut","doc","setDoc","getDoc","updateDoc","serverTimestamp","auth","db","registerUser","email","password","username","hasFaceAuth","userCredential","user","displayName","userData","userId","uid","createdAt","lastLogin","console","log","Date","toISOString","error","signInUser","userRef","userDoc","exists","data","Error","updateFaceAuthStatus","lastUpdated","signOutUser","getCurrentUser","currentUser","getUserData"],"sources":["D:/Movies/Aniket/test2/test/src/firebase/authService.js"],"sourcesContent":["import { \r\n  createUserWithEmailAndPassword, \r\n  signInWithEmailAndPassword,\r\n  updateProfile,\r\n  signOut\r\n} from 'firebase/auth';\r\nimport { doc, setDoc, getDoc, updateDoc, serverTimestamp } from 'firebase/firestore';\r\nimport { auth, db } from './config';\r\n\r\n/**\r\n * Register a new user with email and password\r\n * @param {string} email - User email\r\n * @param {string} password - User password\r\n * @param {string} username - Username for display\r\n * @param {boolean} hasFaceAuth - Whether user has set up face authentication\r\n * @returns {Promise<Object>} - User data including firebase UID\r\n */\r\nexport const registerUser = async (email, password, username, hasFaceAuth = false) => {\r\n  try {\r\n    // Create the user in Firebase Auth\r\n    const userCredential = await createUserWithEmailAndPassword(auth, email, password);\r\n    const user = userCredential.user;\r\n    \r\n    // Update the user profile to include the username\r\n    await updateProfile(user, { displayName: username });\r\n    \r\n    // Create user document in Firestore\r\n    const userData = {\r\n      userId: user.uid,\r\n      email: user.email,\r\n      username,\r\n      hasFaceAuth,\r\n      createdAt: serverTimestamp(),\r\n      lastLogin: serverTimestamp()\r\n    };\r\n    \r\n    await setDoc(doc(db, 'users', user.uid), userData);\r\n    \r\n    console.log('User registered successfully:', user.uid);\r\n    return {\r\n      ...userData,\r\n      createdAt: new Date().toISOString() // Convert timestamp to string for immediate use\r\n    };\r\n  } catch (error) {\r\n    console.error('Error registering user:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Sign in a user with email and password\r\n * @param {string} email - User email\r\n * @param {string} password - User password\r\n * @returns {Promise<Object>} - User data\r\n */\r\nexport const signInUser = async (email, password) => {\r\n  try {\r\n    const userCredential = await signInWithEmailAndPassword(auth, email, password);\r\n    const user = userCredential.user;\r\n    \r\n    // Update last login timestamp in Firestore\r\n    const userRef = doc(db, 'users', user.uid);\r\n    await updateDoc(userRef, {\r\n      lastLogin: serverTimestamp()\r\n    });\r\n    \r\n    // Get full user data\r\n    const userDoc = await getDoc(userRef);\r\n    if (userDoc.exists()) {\r\n      const userData = userDoc.data();\r\n      console.log('User signed in successfully:', user.uid);\r\n      return userData;\r\n    } else {\r\n      throw new Error('User document not found in database');\r\n    }\r\n  } catch (error) {\r\n    console.error('Error signing in:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Update user's face authentication status\r\n * @param {string} userId - User ID\r\n * @param {boolean} hasFaceAuth - Whether user has face auth enabled\r\n */\r\nexport const updateFaceAuthStatus = async (userId, hasFaceAuth) => {\r\n  try {\r\n    const userRef = doc(db, 'users', userId);\r\n    await updateDoc(userRef, {\r\n      hasFaceAuth,\r\n      lastUpdated: serverTimestamp()\r\n    });\r\n    console.log(`Face auth status updated for user ${userId}: ${hasFaceAuth}`);\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error updating face auth status:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n/**\r\n * Sign out the current user\r\n */\r\nexport const signOutUser = async () => {\r\n  try {\r\n    await signOut(auth);\r\n    console.log('User signed out successfully');\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error signing out:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n/**\r\n * Get the current signed-in user\r\n * @returns {Object|null} - The current user or null if not signed in\r\n */\r\nexport const getCurrentUser = () => {\r\n  return auth.currentUser;\r\n};\r\n\r\n/**\r\n * Get user data from Firestore\r\n * @param {string} userId - User ID\r\n * @returns {Promise<Object|null>} - User data or null if not found\r\n */\r\nexport const getUserData = async (userId) => {\r\n  try {\r\n    const userRef = doc(db, 'users', userId);\r\n    const userDoc = await getDoc(userRef);\r\n    if (userDoc.exists()) {\r\n      return userDoc.data();\r\n    }\r\n    return null;\r\n  } catch (error) {\r\n    console.error('Error getting user data:', error);\r\n    return null;\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}